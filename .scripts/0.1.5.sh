#! /bin/zsh -e

source ".scripts/functions.sh"

set -e

PACKAGE_VERSION=0.1.5
HELIOS_VERSION=0.1.3
SWIFT_BRIDGE_VERSION=0.1.52
ETHERS_VERSION=1.0.2

env::setup
env::build_configuration $1

rust::setup

pre_build::create_build_directory
pre_build::setup_openssl dc976d756f9d3273c3c6f960fadb88e44b468050
pre_build::setup_helios
pre_build::modify_helios "use ::client::{database::FileDB, Client, ClientBuilder};
use ::config::{networks};
use ::execution::types::{ExecutionBlock, Transactions};
use ::consensus::types::Header;
use ethers::{
  prelude::{Address, U256, H256, U64}, 
  abi::AbiEncode,
  types::{BlockNumber, FilterBlockOption, Filter, ValueOrArray, Log, TransactionReceipt, Transaction},
};

#[swift_bridge::bridge]
mod ffi {

  enum BlockTag {
    Latest,
    Finalized,
    Safe,
    Earliest,
    Pending,
    Number(u64),
  }

  #[swift_bridge(swift_repr = "struct")]
  struct CallOpts {
    pub from: String,
    pub to: String,
    pub gas: String,
    pub gas_price: String,
    pub value: String,
    pub data: String,
}

  enum HeliosNetwork {
    MAINNET,
    GOERLI,
  }

  #[swift_bridge(swift_repr = "struct")]
  struct StartUpState {
    started: bool,
    error: String,
  }

  enum FilterBlockOption {
    Range { from_block: Option<BlockTag>, to_block: Option<BlockTag> },
    AtBlockHash(String),
  }

  #[swift_bridge(swift_repr = "struct")]
  struct LogFilter {
    pub block_option: FilterBlockOption,
    pub address: String,
    pub topics: Vec<String>,
  }

  #[swift_bridge(swift_repr = "struct")]
  #[derive(Clone)]
  struct Log {
    address: String,
    topics: Vec<String>,
    data: Vec<u8>,
    block_hash: String,
    block_number: Option<u64>,
    transaction_hash: String,
    transaction_index: Option<u64>,
    log_index: String,
    transaction_log_index: String,
    log_type: String,
    removed: Option<bool>,
  }

  #[swift_bridge(swift_repr = "struct")]
  struct TransactionReceipt {
    transaction_hash: String,
    transaction_index: u64,
    block_hash: String, // optional
    block_number: Option<u64>,
    from: String,
    to: String, // optional
    cumulative_gas_used: String,
    gas_used: String, // optional
    contract_address: String, // optional
    logs: Vec<Log>,
    status: Option<u64>,
    root: String, // optionnal
    logs_bloom: Vec<u8>,
    transaction_type: Option<u64>,
    effective_gas_price: String, //optional
  }

  #[swift_bridge(swift_repr = "struct")]
  #[derive(Clone)]
  struct Transaction {
    hash: String,
    nonce: String,
    block_hash: String, //optional
    block_number: Option<u64>,
    transaction_index: Option<u64>,
    from: String,
    to: String, // optional
    value: String,
    gas_price: String, // optional
    gas: String,
    input: Vec<u8>,
    v: String,
    r: String,
    s: String,
  }

  enum Transactions {
    Hashes(Vec<String>),
    Full(Vec<Transaction>),
  }

  #[swift_bridge(swift_repr = "struct")]
  struct ExecutionBlock {
    number: u64,
    base_fee_per_gas: String,
    difficulty: String,
    extra_data: Vec<u8>,
    gas_limit: u64,
    gas_used: u64,
    hash: String,
    logs_bloom: Vec<u8>,
    miner: String,
    mix_hash: String,
    nonce: String,
    parent_hash: String,
    receipts_root: String,
    sha3_uncles: String,
    size: u64,
    state_root: String,
    timestamp: u64,
    total_difficulty: u64,
    transactions: Transactions,
    transactions_root: String,
    uncles: Vec<String>,
  }

  #[swift_bridge(swift_repr = "struct")]
  struct Header {
    slot: u64,
    proposer_index: u64,
    parent_root: String,
    state_root: String,
    body_root: String,
  }

  #[swift_bridge(swift_repr = "struct")]
  struct ResponseU64 {
    value: u64,
    failed: bool,
    error: String,
  }

  #[swift_bridge(swift_repr = "struct")]
  struct ResponseString {
    value: String,
    failed: bool,
    error: String,
  }

  #[swift_bridge(swift_repr = "struct")]
  struct ResponseVec8 {
    value: Vec<u8>,
    failed: bool,
    error: String,
  }

  #[swift_bridge(swift_repr = "struct")]
  struct ResponseVecLog {
    value: Vec<Log>,
    failed: bool,
    error: String,
  }

  #[swift_bridge(swift_repr = "struct")]
  struct ResponseTransactionReceipt {
    value: Option<TransactionReceipt>,
    failed: bool,
    error: String,
  }

  #[swift_bridge(swift_repr = "struct")]
  struct ResponseTransaction {
    value: Option<Transaction>,
    failed: bool,
    error: String,
  }

  #[swift_bridge(swift_repr = "struct")]
  struct ResponseExecutionBlock {
    value: Option<ExecutionBlock>,
    failed: bool,
    error: String,
  }

  #[swift_bridge(swift_repr = "struct")]
  struct ResponseHeader {
    value: Option<Header>,
    failed: bool,
    error: String,
  }

  extern "Rust" {
    type HeliosClient;

    #[swift_bridge(init)]
    fn new() -> HeliosClient;

    async fn start(
      &mut self, 
      untrusted_rpc_url: String, 
      consensus_rpc_url: String,
      checkpoint: Option<String>,
      rpc_port: u16,
      network: HeliosNetwork,
      data_dir: Option<String>
    ) -> StartUpState;

    async fn shutdown(&mut self);

    async fn call(&self, opts: CallOpts, block: BlockTag) -> ResponseVec8;
    async fn send_raw_transaction(&self, bytes: Vec<u8>) -> ResponseString;
    
    async fn estimate_gas(&self, opts: CallOpts) -> ResponseU64;
    async fn chain_id(&self) -> ResponseU64;
    async fn get_gas_price(&self) -> ResponseString;
    async fn get_priority_fee(&self) -> ResponseString;
    async fn get_block_number(&self) -> ResponseU64;
    async fn get_coinbase(&self) -> ResponseString;

    async fn get_balance(&self, address: String, block: BlockTag) -> ResponseString;
    async fn get_nonce(&self, address: String, block: BlockTag) -> ResponseU64;

    async fn get_block_by_number(&self, block: BlockTag, full_tx: bool) -> ResponseExecutionBlock;
    async fn get_block_by_hash(&self, hash: String, full_tx: bool) -> ResponseExecutionBlock;
    async fn get_block_transaction_count_by_hash(&self, hash: String) -> ResponseU64;
    async fn get_block_transaction_count_by_number(&self, block: BlockTag) -> ResponseU64;

    async fn get_transaction_receipt(&self, tx_hash: String) -> ResponseTransactionReceipt;
    async fn get_transaction_by_hash(&self, tx_hash: String) -> ResponseTransaction;
    async fn get_transaction_by_block_hash_and_index(&self, block_hash: String, index: usize) -> ResponseTransaction;
    
    async fn get_logs(&self, filter: LogFilter) -> ResponseVecLog;

    async fn get_code(&self, address: String, block: BlockTag) -> ResponseVec8;
    async fn get_storage_at(
      &self,
      address: String,
      slot: String,
      block: BlockTag,
    ) -> ResponseString;

    async fn get_header(&self) -> ResponseHeader;
  }
}

impl HeliosClient {

  pub fn new() -> HeliosClient {
    HeliosClient {
      client: None,
      is_logging: false,
    }
  }

  async fn start(
    &mut self,
    untrusted_rpc_url: String,
    consensus_rpc_url: String,
    checkpoint: Option<String>,
    rpc_port: u16,
    network: ffi::HeliosNetwork,
    data_dir: Option<String>,
  ) -> ffi::StartUpState {
    if let Some(_client) = &self.client {
      return ffi::StartUpState {
        started: false,
        error: "Client has already started.".to_string(),
      };
    }

    if !self.is_logging {
      self.is_logging = true;
      env_logger::init();
    }

    let mut client_builder = ClientBuilder::new()
      .network(network.to_base_network())
      .execution_rpc(&untrusted_rpc_url)
      .consensus_rpc(&consensus_rpc_url)
      .rpc_port(rpc_port);
    
    if let Some(checkpoint) = &checkpoint {
      client_builder = client_builder.checkpoint(&checkpoint);
    }

    if let Some(data_dir) = &data_dir {
      client_builder = client_builder.data_dir((&data_dir).into());
    }

    match client_builder.build() {
      Err(error) => return ffi::StartUpState {
        started: false,
        error: error.to_string(),
      },
      Ok(mut client) => {
        match client.start().await {
          Err(error) => return ffi::StartUpState {
            started: false,
            error: error.to_string(),
          },
          Ok(()) => {
            self.client = Some(client);
            return ffi::StartUpState {
              started: true,
              error: "".to_string(),
            };
          },
        }
      },
    }
  }

  async fn shutdown(&mut self) {
    if let Some(client) = &self.client {
      client.shutdown().await;
      self.client = None;
    }
  }

  async fn call(&self, opts: ffi::CallOpts, block: ffi::BlockTag) -> ffi::ResponseVec8 {
    if let Some(client) = &self.client {
      match &opts.to_base_opts() {
        Ok(opts) => {
          match client.call(opts, block.to_base_block()).await {
            Ok(data) => ffi::ResponseVec8 {
              value: data,
              failed: false,
              error: "".to_string(),
            },
            Err(error) => ffi::ResponseVec8 {
              value: [].into(),
              failed: true,
              error: error.to_string(),
            }
          }
        },
        Err(error) => ffi::ResponseVec8 {
          value: [].into(),
          failed: true,
          error: format!("Invalid call options: {}", error),
        }
      }
    } else {
      ffi::ResponseVec8 {
        value: [].into(),
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn send_raw_transaction(&self, bytes: Vec<u8>) -> ffi::ResponseString {
    if let Some(client) = &self.client {
      match client.send_raw_transaction(&bytes).await {
        Ok(hash) => ffi::ResponseString {
          value: format!("0x{}", hex::encode(hash)),
          failed: false,
          error: "".to_string(),
        },
        Err(err) => ffi::ResponseString {
          value: "".to_string(),
          failed: true,
          error: err.to_string(),
        }
      }
    } else {
      ffi::ResponseString {
        value: "".to_string(),
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn estimate_gas(&self, opts: ffi::CallOpts) -> ffi::ResponseU64 {
    if let Some(client) = &self.client {
      match &opts.to_base_opts() {
        Ok(opts) => {
          match client.estimate_gas(&opts).await {
            Ok(gas) => ffi::ResponseU64 {
              value: gas,
              failed: false,
              error: "".to_string(),
            },
            Err(error) => ffi::ResponseU64 {
              value: 0,
              failed: true,
              error: error.to_string(),
            }
          }
        },
        Err(error) => ffi::ResponseU64 {
          value: 0,
          failed: true,
          error: format!("Invalid call options: {}", error),
        }
      }
    } else {
      ffi::ResponseU64 {
        value: 0,
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn chain_id(&self) -> ffi::ResponseU64 {
    if let Some(client) = &self.client {
      ffi::ResponseU64 {
        value: client.chain_id().await,
        failed: false,
        error: "".to_string(),
      }
    } else {
      ffi::ResponseU64 {
        value: 0,
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }
  async fn get_gas_price(&self) -> ffi::ResponseString {
    if let Some(client) = &self.client {
      match client.get_gas_price().await {
        Ok(gas_price) => ffi::ResponseString {
          value: gas_price.to_string(),
          failed: false,
          error: "".to_string(),
        },
        Err(error) => ffi::ResponseString {
          value: "".to_string(),
          failed: true,
          error: error.to_string()
        }
      }
    } else {
      ffi::ResponseString {
        value: "".to_string(),
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }
  
  async fn get_priority_fee(&self) -> ffi::ResponseString {
    if let Some(client) = &self.client {
      match client.get_priority_fee().await {
        Ok(priority_fee) => ffi::ResponseString {
          value: priority_fee.to_string(),
          failed: false,
          error: "".to_string(),
        },
        Err(error) => ffi::ResponseString {
          value: "".to_string(),
          failed: true,
          error: error.to_string()
        }
      }
    } else {
      ffi::ResponseString {
        value: "".to_string(),
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }
  
  async fn get_block_number(&self) -> ffi::ResponseU64 {
    if let Some(client) = &self.client {
      match client.get_block_number().await {
        Ok(block) => ffi::ResponseU64 {
          value: block,
          failed: false,
          error: "".to_string(),
        },
        Err(error) => ffi::ResponseU64 {
          value: 0,
          failed: true,
          error: error.to_string(),
        }
      }
    } else {
      ffi::ResponseU64 {
        value: 0,
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_coinbase(&self) -> ffi::ResponseString {
    if let Some(client) = &self.client {
      match client.get_coinbase().await {
        Ok(coinbase) => ffi::ResponseString {
          value: format!("0x{}", hex::encode(coinbase.as_bytes())),
          failed: false,
          error: "".to_string(),
        },
        Err(error) => ffi::ResponseString {
          value: "".to_string(),
          failed: true,
          error: error.to_string(),
        }
      }
    } else {
      ffi::ResponseString {
        value: "".to_string(),
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_balance(&self, address: String, block: ffi::BlockTag) -> ffi::ResponseString {
    if let Some(client) = &self.client {
      match address_from_string(address) {
        Ok(address) => {
          match client.get_balance(&address, block.to_base_block()).await {
            Ok(balance) => ffi::ResponseString {
              value: balance.to_string(),
              failed: false,
              error: "".to_string(),
            },
            Err(error) => ffi::ResponseString {
              value: "".to_string(),
              failed: true,
              error: error.to_string(),
            }
          }
        },
        Err(error) => ffi::ResponseString {
          value: "".to_string(),
          failed: true,
          error: format!("Invalid address: {}", error),
        }
      }
    } else {
      ffi::ResponseString {
        value: "".to_string(),
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_nonce(&self, address: String, block: ffi::BlockTag) -> ffi::ResponseU64 {
    if let Some(client) = &self.client {
      match address_from_string(address) {
        Ok(address) => {
          match client.get_nonce(&address, block.to_base_block()).await {
            Ok(nonce) => ffi::ResponseU64 {
              value: nonce,
              failed: false,
              error: "".to_string(),
            },
            Err(error) => ffi::ResponseU64 {
              value: 0,
              failed: true,
              error: error.to_string(),
            }
          }
        },
        Err(error) => ffi::ResponseU64 {
          value: 0,
          failed: true,
          error: format!("Invalid address: {}", error),
        }
      }
    } else {
      ffi::ResponseU64 {
        value: 0,
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_block_by_number(&self, block: ffi::BlockTag, full_tx: bool) -> ffi::ResponseExecutionBlock {
    if let Some(client) = &self.client {
      match client.get_block_by_number(block.to_base_block(), full_tx).await {
        Ok(block) => ffi::ResponseExecutionBlock {
          value: block.map(helios_execution_block_to_ffi),
          failed: false,
          error: "".to_string(),
        },
        Err(err) => ffi::ResponseExecutionBlock {
          value: None,
          failed: true,
          error: err.to_string(),
        }
      }
    } else {
      ffi::ResponseExecutionBlock {
        value: None,
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }
    
  async fn get_block_by_hash(&self, hash: String, full_tx: bool) -> ffi::ResponseExecutionBlock {
    if let Some(client) = &self.client {
      match h256_from_string(hash) {
        Ok(hash) => {
          match client.get_block_by_hash(&hash.as_bytes().to_vec(), full_tx).await {
            Ok(block) => ffi::ResponseExecutionBlock {
              value: block.map(helios_execution_block_to_ffi),
              failed: false,
              error: "".to_string(),
            },
            Err(err) => ffi::ResponseExecutionBlock {
              value: None,
              failed: true,
              error: err.to_string(),
            },
          }
        },
        Err(err) => ffi::ResponseExecutionBlock {
          value: None,
          failed: true,
          error: format!("Block hash: {}", err),
        },
      }
    } else {
      ffi::ResponseExecutionBlock {
        value: None,
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_block_transaction_count_by_hash(&self, hash: String) -> ffi::ResponseU64 {
    if let Ok(hash) = hex::decode(hash.strip_prefix("0x").unwrap_or("")) {
      if let Some(client) = &self.client {
        match client.get_block_transaction_count_by_hash(&hash).await {
          Ok(count) => ffi::ResponseU64 {
            value: count,
            failed: false,
            error: "".to_string(),
          },
          Err(error) => ffi::ResponseU64 {
            value: 0,
            failed: true,
            error: error.to_string(),
          },
        }
      } else {
        ffi::ResponseU64 {
          value: 0,
          failed: true,
          error: "Helios client wasn't started.".to_string(),
        }
      }
    } else {
      ffi::ResponseU64 {
        value: 0,
        failed: true,
        error: "Invalid hash".to_string(),
      }
    }
  }

  async fn get_block_transaction_count_by_number(&self, block: ffi::BlockTag) -> ffi::ResponseU64 {
    if let Some(client) = &self.client {
      match client.get_block_transaction_count_by_number(block.to_base_block()).await {
        Ok(count) => ffi::ResponseU64 {
          value: count,
          failed: false,
          error: "".to_string(),
        },
        Err(error) => ffi::ResponseU64 {
          value: 0,
          failed: true,
          error: error.to_string(),
        },
      }
    } else {
      ffi::ResponseU64 {
        value: 0,
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_transaction_receipt(&self, tx_hash: String) -> ffi::ResponseTransactionReceipt {
    if let Some(client) = &self.client {
      match h256_from_string(tx_hash) {
        Ok(tx_hash) => {
          match client.get_transaction_receipt(&tx_hash).await {
            Ok(receipt) => ffi::ResponseTransactionReceipt {
              value: receipt.map(ethers_receipt_to_ffi),
              failed: false,
              error: "".to_string(),
            },
            Err(error) => ffi::ResponseTransactionReceipt {
              value: None,
              failed: true,
              error: error.to_string(),
            }
          }
        },
        Err(error) => ffi::ResponseTransactionReceipt {
          value: None,
          failed: true,
          error: format!("Transaction hash: {}", error),
        }
      }
    } else {
      ffi::ResponseTransactionReceipt {
        value: None,
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_transaction_by_hash(&self, tx_hash: String) -> ffi::ResponseTransaction {
    if let Some(client) = &self.client {
      match h256_from_string(tx_hash) {
        Ok(hash) => {
          match client.get_transaction_by_hash(&hash).await {
            Ok(transaction) => ffi::ResponseTransaction {
              value: transaction.map(ethers_transaction_to_ffi),
              failed: false,
              error: "".to_string(),
            },
            Err(err) => ffi::ResponseTransaction {
              value: None,
              failed: true,
              error: err.to_string(),
            },
          }
        },
        Err(err) => ffi::ResponseTransaction {
          value: None,
          failed: true,
          error: format!("Transaction hash: {}", err),
        },
      }
    } else {
      ffi::ResponseTransaction {
        value: None,
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_transaction_by_block_hash_and_index(&self, block_hash: String, index: usize) -> ffi::ResponseTransaction {
    if let Some(client) = &self.client {
      match h256_from_string(block_hash) {
        Ok(hash) => {
          match client.get_transaction_by_block_hash_and_index(&hash.as_bytes().to_vec(), index).await {
            Ok(transaction) => ffi::ResponseTransaction {
              value: transaction.map(ethers_transaction_to_ffi),
              failed: false,
              error: "".to_string(),
            },
            Err(err) => ffi::ResponseTransaction {
              value: None,
              failed: true,
              error: err.to_string(),
            },
          }
        },
        Err(err) => ffi::ResponseTransaction {
          value: None,
          failed: true,
          error: format!("Block hash: {}", err),
        },
      }
    } else {
      ffi::ResponseTransaction {
        value: None,
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_logs(&self, filter: ffi::LogFilter) -> ffi::ResponseVecLog {
    if let Some(client) = &self.client {
      match filter.to_ethers_filter() {
        Ok(filter) => {
          match client.get_logs(&filter).await {
            Ok(logs) => {
              ffi::ResponseVecLog {
                value: logs.into_iter().map(ethers_log_to_ffi_log).collect(),
                failed: false,
                error: "".to_string(),
              }
            },
            Err(err) => ffi::ResponseVecLog {
              value: vec![],
              failed: true,
              error: err.to_string(),
            },
          }
        }
        Err(err) => ffi::ResponseVecLog {
          value: vec![],
          failed: true,
          error: format!("Invalid filter: {}", err),
        }
      }
    } else {
      ffi::ResponseVecLog {
        value: vec![],
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_code(&self, address: String, block: ffi::BlockTag) -> ffi::ResponseVec8 {
    if let Some(client) = &self.client {
      match address_from_string(address) {
        Ok(address) => {
          match client.get_code(&address, block.to_base_block()).await {
            Ok(code) => ffi::ResponseVec8 {
              value: code,
              failed: false,
              error: "".to_string(),
            },
            Err(error) => ffi::ResponseVec8 {
              value: [].into(),
              failed: true,
              error: error.to_string(),
            }
          }
        },
        Err(error) => ffi::ResponseVec8 {
          value: [].into(),
          failed: true,
          error: format!("Invalid address: {}", error),
        }
      }
    } else {
      ffi::ResponseVec8 {
        value: [].into(),
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_storage_at(
    &self,
    address: String,
    slot: String,
    block: ffi::BlockTag,
  ) -> ffi::ResponseString {
    if let Some(client) = &self.client {
      match address_from_string(address) {
        Ok(address) => {
          match h256_from_string(slot) {
            Ok(slot) => {
              match client.get_storage_at(&address, slot, block.to_base_block()).await {
                Ok(storage) => ffi::ResponseString {
                  value: storage.encode_hex(),
                  failed: false,
                  error: "".to_string(),
                },
                Err(error) => ffi::ResponseString {
                  value: "".to_string(),
                  failed: true,
                  error: error.to_string(),
                }
              }
            },
            Err(error) => ffi::ResponseString {
              value: "".to_string(),
              failed: true,
              error: format!("Invalid slot: {}", error),
            }
          }
        },
        Err(error) => ffi::ResponseString {
          value: "".to_string(),
          failed: true,
          error: format!("Invalid address: {}", error),
        }
      }
    } else {
      ffi::ResponseString {
        value: "".to_string(),
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }

  async fn get_header(&self) -> ffi::ResponseHeader {
    if let Some(client) = &self.client {
      match client.get_header().await {
        Ok(header) => ffi::ResponseHeader {
          value: Some(helios_header_to_ffi(header)),
          failed: false,
          error: "".to_string(),
        },
        Err(err) => ffi::ResponseHeader {
          value: None,
          failed: true,
          error: err.to_string(),
        }
      }
    } else {
      ffi::ResponseHeader {
        value: None,
        failed: true,
        error: "Helios client wasn't started.".to_string(),
      }
    }
  }
}

impl ffi::HeliosNetwork {

  fn to_base_network(&self) -> networks::Network {
      match self {
          Self::MAINNET => networks::Network::MAINNET,
          Self::GOERLI => networks::Network::GOERLI,
      }
  }
}

impl ffi::BlockTag {
  fn to_base_block(&self) -> common::types::BlockTag {
    match self {
      Self::Finalized => common::types::BlockTag::Finalized,
      Self::Latest => common::types::BlockTag::Latest,
      Self::Safe => common::types::BlockTag::Finalized,
      Self::Pending => common::types::BlockTag::Latest,
      Self::Earliest => common::types::BlockTag::Number(1),
      Self::Number(block) => common::types::BlockTag::Number(*block),
    }
  }

  fn to_ethers_block(&self) -> BlockNumber {
    match self {
      Self::Finalized => BlockNumber::Finalized,
      Self::Latest => BlockNumber::Latest,
      Self::Safe => BlockNumber::Safe,
      Self::Pending => BlockNumber::Pending,
      Self::Earliest => BlockNumber::Earliest,
      Self::Number(block) => BlockNumber::Number(U64::from(*block)),
    }
  }
}

impl Clone for ffi::BlockTag {
  fn clone(&self) -> Self {
    match self {
      Self::Finalized => ffi::BlockTag::Finalized,
      Self::Latest => ffi::BlockTag::Latest,
      Self::Safe => ffi::BlockTag::Safe,
      Self::Pending => ffi::BlockTag::Pending,
      Self::Earliest => ffi::BlockTag::Earliest,
      Self::Number(block) => ffi::BlockTag::Number(*block),
    }
  }
}

impl ffi::FilterBlockOption {
  fn to_ethers_block_option(&self) -> Result<FilterBlockOption, String> {
    match self {
      Self::Range { from_block, to_block } => Ok(FilterBlockOption::Range { from_block: from_block.as_ref().map(|block| block.to_ethers_block()), to_block: to_block.as_ref().map(|block| block.to_ethers_block()) }),
      Self::AtBlockHash(hash) => Ok(FilterBlockOption::AtBlockHash(h256_from_string(hash.to_string()).map_err(|error| format!("Filter block hash: {}", error))?)),
    }
  }
}

impl Clone for ffi::FilterBlockOption {
  fn clone(&self) -> Self {
    match self {
      Self::Range { from_block, to_block } => ffi::FilterBlockOption::Range { from_block: from_block.clone(), to_block: to_block.clone() },
      Self::AtBlockHash(hash) => ffi::FilterBlockOption::AtBlockHash(hash.clone()),
    }
  }
}

impl ffi::LogFilter {
  fn to_ethers_filter(&self) -> Result<Filter, String> {
    Ok(
      Filter {
        block_option: self.block_option.to_ethers_block_option()?,
        address: if self.address.is_empty() { None } else { Some(addresses_from_string(self.address.clone()).map_err(|err| format!("Filter address: {}", err))?) },
        topics: topics_from_strings(self.topics.clone()).map_err(|err| format!("Filter topics: {}", err))?
      }
    )
  }
}

impl ffi::CallOpts {
  fn to_base_opts(&self) -> Result<execution::types::CallOpts, String> {
    Ok(execution::types::CallOpts {
      from: if self.from.is_empty() { None } else { Some(address_from_string(self.from.clone()).map_err(|err| format!("from: {}", err))?) },
      to: address_from_string(self.to.clone()).map_err(|err| format!("to: {}", err))?,
      gas: if self.gas.is_empty() { None } else { Some(u256_from_string(self.gas.clone()).map_err(|err| format!("gas: {}", err))?) },
      gas_price: if self.gas_price.is_empty() { None } else { Some(u256_from_string(self.gas_price.clone()).map_err(|err| format!("gas_price: {}", err))?) },
      value: if self.value.is_empty() { None } else { Some(u256_from_string(self.value.clone()).map_err(|err| format!("value: {}", err))?) },
      data: if self.data.is_empty() { None } else { Some(vec8_from_string(self.data.clone()).map_err(|err| format!("data: {}", err))?) },
    })
  }
}

impl Clone for ffi::Transactions {
  fn clone(&self) -> Self {
    match self {
      Self::Hashes(hashes) => ffi::Transactions::Hashes(hashes.clone()),
      Self::Full(transactions) => ffi::Transactions::Full(transactions.to_vec()),
    }
  }
}

fn topics_from_strings(value: Vec<String>) -> Result<[Option<ValueOrArray<Option<H256>>>; 4], String> {
  if value.len() > 4 {
    Err("Too many topics".to_string())
  } else {
    let map_string_to_topics = |value: String| -> Result<Option<ValueOrArray<Option<H256>>>, String> {
      if value.is_empty() {
        Ok(None)
      } else {
        let topics: Vec<&str> = value.split(',').collect();
        if topics.len() == 1 {
          Ok(Some(ValueOrArray::Value(Some(h256_from_string(topics[0].to_string())?))))
        } else {
          let mapped: Result<Vec<H256>, String> = topics.into_iter().map(|topic| h256_from_string(topic.to_string())).collect();
          let option_mapped: Vec<Option<H256>> = mapped?.into_iter().map(|hash| Option::Some(hash)).collect();
          Ok(Some(ValueOrArray::Array(option_mapped)))
        }
      }
    };
    let mut topics = value.clone();
    for _i in topics.len()..4 {
      topics.push("".to_string());
    }
    let mapped: Result<Vec<Option<ValueOrArray<Option<H256>>>>, String> = topics.into_iter().map(map_string_to_topics).collect();
    Ok(mapped?.try_into().map_err(|_err| "Failed to map vector")?)
  }
}

fn address_from_string(value: String) -> Result<Address, String> {
  let raw_hex = vec8_from_string(value)?;
  if raw_hex.len() == Address::len_bytes() {
    Ok(Address::from_slice(&raw_hex))
  } else {
    Err(format!("Should be {} bytes long", Address::len_bytes()))
  }
}

fn addresses_from_string(value: String) -> Result<ValueOrArray<Address>, String> {
  let addresses: Vec<&str> = value.split(',').collect();
  if addresses.len() == 1 {
    Ok(ValueOrArray::Value(address_from_string(addresses[0].to_string())?))
  } else {
    let mapped: Result<Vec<Address>, String> = addresses.into_iter().map(|address| address_from_string(address.to_string())).collect();
    Ok(ValueOrArray::Array(mapped?))
  }
}

fn h256_from_string(value: String) -> Result<H256, String> {
  let raw_hex = vec8_from_string(value)?;
  if raw_hex.len() == H256::len_bytes() {
    Ok(H256::from_slice(&raw_hex))
  } else {
    Err(format!("Should be {} bytes long", H256::len_bytes()))
  }
}

fn u256_from_string(value: String) -> Result<U256, String> {
  if let Some(raw_hex_string) = value.strip_prefix("0x") {
    Ok(U256::from_str_radix(raw_hex_string, 16).map_err(|err| err.to_string())?)
  } else {
    Ok(U256::from_str_radix(&value, 10).map_err(|err| err.to_string())?)
  }
}

fn vec8_from_string(value: String) -> Result<Vec<u8>, String> {
  if let Some(raw_hex_string) = value.strip_prefix("0x") {
    Ok(hex::decode(raw_hex_string).map_err(|err| err.to_string())?)
  } else {
    Err("Should be a hex value prefixed with 0x".to_string())
  }
}

fn ethers_log_to_ffi_log(value: Log) -> ffi::Log {
  ffi::Log {
    address: format!("0x{}", hex::encode(value.address.as_bytes())),
    topics: value.topics.into_iter().map(|topic| format!("0x{}", hex::encode(topic.as_bytes()))).collect(),
    data: value.data.encode(),
    block_hash: value.block_hash.map(|hash| format!("0x{}", hex::encode(hash.as_bytes()))).unwrap_or("".to_string()),
    block_number: value.block_number.map(|block| block.as_u64()),
    transaction_hash: value.transaction_hash.map(|hash| format!("0x{}", hex::encode(hash.as_bytes()))).unwrap_or("".to_string()),
    transaction_index: value.transaction_index.map(|index| index.as_u64()),
    log_index: value.log_index.map(|index| index.to_string()).unwrap_or("".to_string()),
    transaction_log_index: value.transaction_log_index.map(|index| index.to_string()).unwrap_or("".to_string()),
    log_type: value.log_type.unwrap_or("".to_string()),
    removed: value.removed,
  }
}

fn ethers_receipt_to_ffi(value: TransactionReceipt) -> ffi::TransactionReceipt {
  ffi::TransactionReceipt {
    transaction_hash: format!("0x{}", hex::encode(value.transaction_hash.as_bytes())),
    transaction_index: value.transaction_index.as_u64(),
    block_hash: value.block_hash.map(|hash| format!("0x{}", hex::encode(hash.as_bytes()))).unwrap_or("".to_string()),
    block_number: value.block_number.map(|number| number.as_u64()),
    from: format!("0x{}", hex::encode(value.from.as_bytes())),
    to: value.to.map(|address| format!("0x{}", hex::encode(address.as_bytes()))).unwrap_or("".to_string()),
    cumulative_gas_used: value.cumulative_gas_used.to_string(),
    gas_used: value.gas_used.map(|gas| gas.to_string()).unwrap_or("".to_string()),
    contract_address: value.contract_address.map(|address| format!("0x{}", hex::encode(address.as_bytes()))).unwrap_or("".to_string()),
    logs: value.logs.into_iter().map(ethers_log_to_ffi_log).collect(),
    status: value.status.map(|status| status.as_u64()),
    root: value.root.map(|hash| format!("0x{}", hex::encode(hash.as_bytes()))).unwrap_or("".to_string()),
    logs_bloom: value.logs_bloom.as_bytes().to_vec(),
    transaction_type: value.transaction_type.map(|val| val.as_u64()),
    effective_gas_price: value.effective_gas_price.map(|gas| gas.to_string()).unwrap_or("".to_string()),
  }
}

fn ethers_transaction_to_ffi(value: Transaction) -> ffi::Transaction {
  ffi::Transaction {
    hash: format!("0x{}", hex::encode(value.hash.as_bytes())),
    nonce: value.nonce.to_string(),
    block_hash: value.block_hash.map(|hash| format!("0x{}", hex::encode(hash.as_bytes()))).unwrap_or("".to_string()),
    block_number: value.block_number.map(|block| block.as_u64()),
    transaction_index: value.transaction_index.map(|index| index.as_u64()),
    from: format!("0x{}", hex::encode(value.from.as_bytes())),
    to: value.to.map(|address| format!("0x{}", hex::encode(address.as_bytes()))).unwrap_or("".to_string()),
    value: value.value.to_string(),
    gas_price: value.gas_price.map(|gas| gas.to_string()).unwrap_or("".to_string()),
    gas: value.gas.to_string(),
    input: value.input.to_vec(),
    v: value.v.to_string(),
    r: value.r.encode_hex(),
    s: value.s.encode_hex(),
  }
}

fn helios_transactions_to_ffi(value: Transactions) -> ffi::Transactions {
  match value {
    Transactions::Hashes(hashes) => ffi::Transactions::Hashes(hashes.into_iter().map(|hash| format!("0x{}", hex::encode(hash.as_bytes()))).collect()),
    Transactions::Full(transactions) => ffi::Transactions::Full(transactions.into_iter().map(ethers_transaction_to_ffi).collect()),
  }
}

fn helios_execution_block_to_ffi(value: ExecutionBlock) -> ffi::ExecutionBlock {
  ffi::ExecutionBlock {
    number: value.number,
    base_fee_per_gas: value.base_fee_per_gas.to_string(),
    difficulty: value.difficulty.to_string(),
    extra_data: value.extra_data.to_vec(),
    gas_limit: value.gas_limit,
    gas_used: value.gas_used,
    hash: format!("0x{}", hex::encode(value.hash.as_bytes())),
    logs_bloom: value.logs_bloom.to_vec(),
    miner: format!("0x{}", hex::encode(value.miner.as_bytes())),
    mix_hash: format!("0x{}", hex::encode(value.mix_hash.as_bytes())),
    nonce: value.nonce.to_string(),
    parent_hash: format!("0x{}", hex::encode(value.parent_hash.as_bytes())),
    receipts_root: format!("0x{}", hex::encode(value.receipts_root.as_bytes())),
    sha3_uncles: format!("0x{}", hex::encode(value.sha3_uncles.as_bytes())),
    size: value.size,
    state_root: format!("0x{}", hex::encode(value.state_root.as_bytes())),
    timestamp: value.timestamp,
    total_difficulty: value.total_difficulty,
    transactions: helios_transactions_to_ffi(value.transactions),
    transactions_root: format!("0x{}", hex::encode(value.transactions_root.as_bytes())),
    uncles: value.uncles.into_iter().map(|hash| format!("0x{}", hex::encode(hash.as_bytes()))).collect(),
  }
}

fn helios_header_to_ffi(value: Header) -> ffi::Header {
  ffi::Header {
    slot: value.slot,
    proposer_index: value.proposer_index,
    parent_root: format!("0x{}", hex::encode(value.parent_root)),
    state_root: format!("0x{}", hex::encode(value.state_root)),
    body_root: format!("0x{}", hex::encode(value.body_root)),
  }
}

pub struct HeliosClient {
  client: Option<Client<FileDB>>,
  is_logging: bool,
}
"

rust::build
build::lipo
build::generate_c_headers
build::xcframework

post_build::compress
post_build::copy_bridge_files
post_build::success
