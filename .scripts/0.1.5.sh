#! /bin/zsh -e

source ".scripts/functions.sh"

set -e

PACKAGE_VERSION=0.1.5
HELIOS_VERSION=0.1.3
SWIFT_BRIDGE_VERSION=0.1.52
ETHERS_VERSION=1.0.2

env::setup
env::build_configuration $1

rust::setup

pre_build::create_build_directory
pre_build::setup_openssl dc976d756f9d3273c3c6f960fadb88e44b468050
pre_build::setup_helios
pre_build::modify_helios "dXNlIDo6Y2xpZW50Ojp7ZGF0YWJhc2U6OkZpbGVEQiwgQ2xpZW50LCBDbGllbnRCdWlsZGVyfTsKdXNlIDo6Y29uZmlnOjp7bmV0d29ya3N9Owp1c2UgOjpleGVjdXRpb246OnR5cGVzOjp7RXhlY3V0aW9uQmxvY2ssIFRyYW5zYWN0aW9uc307CnVzZSA6OmNvbnNlbnN1czo6dHlwZXM6OkhlYWRlcjsKdXNlIGV0aGVyczo6ewogIHByZWx1ZGU6OntBZGRyZXNzLCBVMjU2LCBIMjU2LCBVNjR9LCAKICBhYmk6OkFiaUVuY29kZSwKICB0eXBlczo6e0Jsb2NrTnVtYmVyLCBGaWx0ZXJCbG9ja09wdGlvbiwgRmlsdGVyLCBWYWx1ZU9yQXJyYXksIExvZywgVHJhbnNhY3Rpb25SZWNlaXB0LCBUcmFuc2FjdGlvbn0sCn07CgojW3N3aWZ0X2JyaWRnZTo6YnJpZGdlXQptb2QgZmZpIHsKCiAgZW51bSBCbG9ja1RhZyB7CiAgICBMYXRlc3QsCiAgICBGaW5hbGl6ZWQsCiAgICBTYWZlLAogICAgRWFybGllc3QsCiAgICBQZW5kaW5nLAogICAgTnVtYmVyKHU2NCksCiAgfQoKICAjW3N3aWZ0X2JyaWRnZShzd2lmdF9yZXByID0gInN0cnVjdCIpXQogIHN0cnVjdCBDYWxsT3B0cyB7CiAgICBwdWIgZnJvbTogU3RyaW5nLAogICAgcHViIHRvOiBTdHJpbmcsCiAgICBwdWIgZ2FzOiBTdHJpbmcsCiAgICBwdWIgZ2FzX3ByaWNlOiBTdHJpbmcsCiAgICBwdWIgdmFsdWU6IFN0cmluZywKICAgIHB1YiBkYXRhOiBTdHJpbmcsCn0KCiAgZW51bSBIZWxpb3NOZXR3b3JrIHsKICAgIE1BSU5ORVQsCiAgICBHT0VSTEksCiAgfQoKICAjW3N3aWZ0X2JyaWRnZShzd2lmdF9yZXByID0gInN0cnVjdCIpXQogIHN0cnVjdCBTdGFydFVwU3RhdGUgewogICAgc3RhcnRlZDogYm9vbCwKICAgIGVycm9yOiBTdHJpbmcsCiAgfQoKICBlbnVtIEZpbHRlckJsb2NrT3B0aW9uIHsKICAgIFJhbmdlIHsgZnJvbV9ibG9jazogT3B0aW9uPEJsb2NrVGFnPiwgdG9fYmxvY2s6IE9wdGlvbjxCbG9ja1RhZz4gfSwKICAgIEF0QmxvY2tIYXNoKFN0cmluZyksCiAgfQoKICAjW3N3aWZ0X2JyaWRnZShzd2lmdF9yZXByID0gInN0cnVjdCIpXQogIHN0cnVjdCBMb2dGaWx0ZXIgewogICAgcHViIGJsb2NrX29wdGlvbjogRmlsdGVyQmxvY2tPcHRpb24sCiAgICBwdWIgYWRkcmVzczogU3RyaW5nLAogICAgcHViIHRvcGljczogVmVjPFN0cmluZz4sCiAgfQoKICAjW3N3aWZ0X2JyaWRnZShzd2lmdF9yZXByID0gInN0cnVjdCIpXQogIHN0cnVjdCBMb2cgewogICAgYWRkcmVzczogU3RyaW5nLAogICAgdG9waWNzOiBWZWM8U3RyaW5nPiwKICAgIGRhdGE6IFZlYzx1OD4sCiAgICBibG9ja19oYXNoOiBTdHJpbmcsCiAgICBibG9ja19udW1iZXI6IE9wdGlvbjx1NjQ+LAogICAgdHJhbnNhY3Rpb25faGFzaDogU3RyaW5nLAogICAgdHJhbnNhY3Rpb25faW5kZXg6IE9wdGlvbjx1NjQ+LAogICAgbG9nX2luZGV4OiBTdHJpbmcsCiAgICB0cmFuc2FjdGlvbl9sb2dfaW5kZXg6IFN0cmluZywKICAgIGxvZ190eXBlOiBTdHJpbmcsCiAgICByZW1vdmVkOiBPcHRpb248Ym9vbD4sCiAgfQoKICAjW3N3aWZ0X2JyaWRnZShzd2lmdF9yZXByID0gInN0cnVjdCIpXQogIHN0cnVjdCBUcmFuc2FjdGlvblJlY2VpcHQgewogICAgdHJhbnNhY3Rpb25faGFzaDogU3RyaW5nLAogICAgdHJhbnNhY3Rpb25faW5kZXg6IHU2NCwKICAgIGJsb2NrX2hhc2g6IFN0cmluZywgLy8gb3B0aW9uYWwKICAgIGJsb2NrX251bWJlcjogT3B0aW9uPHU2ND4sCiAgICBmcm9tOiBTdHJpbmcsCiAgICB0bzogU3RyaW5nLCAvLyBvcHRpb25hbAogICAgY3VtdWxhdGl2ZV9nYXNfdXNlZDogU3RyaW5nLAogICAgZ2FzX3VzZWQ6IFN0cmluZywgLy8gb3B0aW9uYWwKICAgIGNvbnRyYWN0X2FkZHJlc3M6IFN0cmluZywgLy8gb3B0aW9uYWwKICAgIGxvZ3M6IFZlYzxMb2c+LAogICAgc3RhdHVzOiBPcHRpb248dTY0PiwKICAgIHJvb3Q6IFN0cmluZywgLy8gb3B0aW9ubmFsCiAgICBsb2dzX2Jsb29tOiBWZWM8dTg+LAogICAgdHJhbnNhY3Rpb25fdHlwZTogT3B0aW9uPHU2ND4sCiAgICBlZmZlY3RpdmVfZ2FzX3ByaWNlOiBTdHJpbmcsIC8vb3B0aW9uYWwKICB9CgogICNbc3dpZnRfYnJpZGdlKHN3aWZ0X3JlcHIgPSAic3RydWN0IildCiAgc3RydWN0IFRyYW5zYWN0aW9uIHsKICAgIGhhc2g6IFN0cmluZywKICAgIG5vbmNlOiBTdHJpbmcsCiAgICBibG9ja19oYXNoOiBTdHJpbmcsIC8vb3B0aW9uYWwKICAgIGJsb2NrX251bWJlcjogT3B0aW9uPHU2ND4sCiAgICB0cmFuc2FjdGlvbl9pbmRleDogT3B0aW9uPHU2ND4sCiAgICBmcm9tOiBTdHJpbmcsCiAgICB0bzogU3RyaW5nLCAvLyBvcHRpb25hbAogICAgdmFsdWU6IFN0cmluZywKICAgIGdhc19wcmljZTogU3RyaW5nLCAvLyBvcHRpb25hbAogICAgZ2FzOiBTdHJpbmcsCiAgICBpbnB1dDogVmVjPHU4PiwKICAgIHY6IFN0cmluZywKICAgIHI6IFN0cmluZywKICAgIHM6IFN0cmluZywKICB9CgogIGVudW0gVHJhbnNhY3Rpb25zIHsKICAgIEhhc2hlcyhWZWM8U3RyaW5nPiksCiAgICBGdWxsKFZlYzxUcmFuc2FjdGlvbj4pLAogIH0KCiAgI1tzd2lmdF9icmlkZ2Uoc3dpZnRfcmVwciA9ICJzdHJ1Y3QiKV0KICBzdHJ1Y3QgRXhlY3V0aW9uQmxvY2sgewogICAgbnVtYmVyOiB1NjQsCiAgICBiYXNlX2ZlZV9wZXJfZ2FzOiBTdHJpbmcsCiAgICBkaWZmaWN1bHR5OiBTdHJpbmcsCiAgICBleHRyYV9kYXRhOiBWZWM8dTg+LAogICAgZ2FzX2xpbWl0OiB1NjQsCiAgICBnYXNfdXNlZDogdTY0LAogICAgaGFzaDogU3RyaW5nLAogICAgbG9nc19ibG9vbTogVmVjPHU4PiwKICAgIG1pbmVyOiBTdHJpbmcsCiAgICBtaXhfaGFzaDogU3RyaW5nLAogICAgbm9uY2U6IFN0cmluZywKICAgIHBhcmVudF9oYXNoOiBTdHJpbmcsCiAgICByZWNlaXB0c19yb290OiBTdHJpbmcsCiAgICBzaGEzX3VuY2xlczogU3RyaW5nLAogICAgc2l6ZTogdTY0LAogICAgc3RhdGVfcm9vdDogU3RyaW5nLAogICAgdGltZXN0YW1wOiB1NjQsCiAgICB0b3RhbF9kaWZmaWN1bHR5OiB1NjQsCiAgICB0cmFuc2FjdGlvbnM6IFRyYW5zYWN0aW9ucywKICAgIHRyYW5zYWN0aW9uc19yb290OiBTdHJpbmcsCiAgICB1bmNsZXM6IFZlYzxTdHJpbmc+LAogIH0KCiAgI1tzd2lmdF9icmlkZ2Uoc3dpZnRfcmVwciA9ICJzdHJ1Y3QiKV0KICBzdHJ1Y3QgSGVhZGVyIHsKICAgIHNsb3Q6IHU2NCwKICAgIHByb3Bvc2VyX2luZGV4OiB1NjQsCiAgICBwYXJlbnRfcm9vdDogU3RyaW5nLAogICAgc3RhdGVfcm9vdDogU3RyaW5nLAogICAgYm9keV9yb290OiBTdHJpbmcsCiAgfQoKICAjW3N3aWZ0X2JyaWRnZShzd2lmdF9yZXByID0gInN0cnVjdCIpXQogIHN0cnVjdCBSZXNwb25zZVU2NCB7CiAgICB2YWx1ZTogdTY0LAogICAgZmFpbGVkOiBib29sLAogICAgZXJyb3I6IFN0cmluZywKICB9CgogICNbc3dpZnRfYnJpZGdlKHN3aWZ0X3JlcHIgPSAic3RydWN0IildCiAgc3RydWN0IFJlc3BvbnNlU3RyaW5nIHsKICAgIHZhbHVlOiBTdHJpbmcsCiAgICBmYWlsZWQ6IGJvb2wsCiAgICBlcnJvcjogU3RyaW5nLAogIH0KCiAgI1tzd2lmdF9icmlkZ2Uoc3dpZnRfcmVwciA9ICJzdHJ1Y3QiKV0KICBzdHJ1Y3QgUmVzcG9uc2VWZWM4IHsKICAgIHZhbHVlOiBWZWM8dTg+LAogICAgZmFpbGVkOiBib29sLAogICAgZXJyb3I6IFN0cmluZywKICB9CgogICNbc3dpZnRfYnJpZGdlKHN3aWZ0X3JlcHIgPSAic3RydWN0IildCiAgc3RydWN0IFJlc3BvbnNlVmVjTG9nIHsKICAgIHZhbHVlOiBWZWM8TG9nPiwKICAgIGZhaWxlZDogYm9vbCwKICAgIGVycm9yOiBTdHJpbmcsCiAgfQoKICAjW3N3aWZ0X2JyaWRnZShzd2lmdF9yZXByID0gInN0cnVjdCIpXQogIHN0cnVjdCBSZXNwb25zZVRyYW5zYWN0aW9uUmVjZWlwdCB7CiAgICB2YWx1ZTogT3B0aW9uPFRyYW5zYWN0aW9uUmVjZWlwdD4sCiAgICBmYWlsZWQ6IGJvb2wsCiAgICBlcnJvcjogU3RyaW5nLAogIH0KCiAgI1tzd2lmdF9icmlkZ2Uoc3dpZnRfcmVwciA9ICJzdHJ1Y3QiKV0KICBzdHJ1Y3QgUmVzcG9uc2VUcmFuc2FjdGlvbiB7CiAgICB2YWx1ZTogT3B0aW9uPFRyYW5zYWN0aW9uPiwKICAgIGZhaWxlZDogYm9vbCwKICAgIGVycm9yOiBTdHJpbmcsCiAgfQoKICAjW3N3aWZ0X2JyaWRnZShzd2lmdF9yZXByID0gInN0cnVjdCIpXQogIHN0cnVjdCBSZXNwb25zZUV4ZWN1dGlvbkJsb2NrIHsKICAgIHZhbHVlOiBPcHRpb248RXhlY3V0aW9uQmxvY2s+LAogICAgZmFpbGVkOiBib29sLAogICAgZXJyb3I6IFN0cmluZywKICB9CgogICNbc3dpZnRfYnJpZGdlKHN3aWZ0X3JlcHIgPSAic3RydWN0IildCiAgc3RydWN0IFJlc3BvbnNlSGVhZGVyIHsKICAgIHZhbHVlOiBPcHRpb248SGVhZGVyPiwKICAgIGZhaWxlZDogYm9vbCwKICAgIGVycm9yOiBTdHJpbmcsCiAgfQoKICBleHRlcm4gIlJ1c3QiIHsKICAgIHR5cGUgSGVsaW9zQ2xpZW50OwoKICAgICNbc3dpZnRfYnJpZGdlKGluaXQpXQogICAgZm4gbmV3KCkgLT4gSGVsaW9zQ2xpZW50OwoKICAgIGFzeW5jIGZuIHN0YXJ0KAogICAgICAmbXV0IHNlbGYsIAogICAgICB1bnRydXN0ZWRfcnBjX3VybDogU3RyaW5nLCAKICAgICAgY29uc2Vuc3VzX3JwY191cmw6IFN0cmluZywKICAgICAgY2hlY2twb2ludDogT3B0aW9uPFN0cmluZz4sCiAgICAgIHJwY19wb3J0OiB1MTYsCiAgICAgIG5ldHdvcms6IEhlbGlvc05ldHdvcmssCiAgICAgIGRhdGFfZGlyOiBPcHRpb248U3RyaW5nPgogICAgKSAtPiBTdGFydFVwU3RhdGU7CgogICAgYXN5bmMgZm4gc2h1dGRvd24oJm11dCBzZWxmKTsKCiAgICBhc3luYyBmbiBjYWxsKCZzZWxmLCBvcHRzOiBDYWxsT3B0cywgYmxvY2s6IEJsb2NrVGFnKSAtPiBSZXNwb25zZVZlYzg7CiAgICBhc3luYyBmbiBzZW5kX3Jhd190cmFuc2FjdGlvbigmc2VsZiwgYnl0ZXM6IFZlYzx1OD4pIC0+IFJlc3BvbnNlU3RyaW5nOwogICAgCiAgICBhc3luYyBmbiBlc3RpbWF0ZV9nYXMoJnNlbGYsIG9wdHM6IENhbGxPcHRzKSAtPiBSZXNwb25zZVU2NDsKICAgIGFzeW5jIGZuIGNoYWluX2lkKCZzZWxmKSAtPiBSZXNwb25zZVU2NDsKICAgIGFzeW5jIGZuIGdldF9nYXNfcHJpY2UoJnNlbGYpIC0+IFJlc3BvbnNlU3RyaW5nOwogICAgYXN5bmMgZm4gZ2V0X3ByaW9yaXR5X2ZlZSgmc2VsZikgLT4gUmVzcG9uc2VTdHJpbmc7CiAgICBhc3luYyBmbiBnZXRfYmxvY2tfbnVtYmVyKCZzZWxmKSAtPiBSZXNwb25zZVU2NDsKICAgIGFzeW5jIGZuIGdldF9jb2luYmFzZSgmc2VsZikgLT4gUmVzcG9uc2VTdHJpbmc7CgogICAgYXN5bmMgZm4gZ2V0X2JhbGFuY2UoJnNlbGYsIGFkZHJlc3M6IFN0cmluZywgYmxvY2s6IEJsb2NrVGFnKSAtPiBSZXNwb25zZVN0cmluZzsKICAgIGFzeW5jIGZuIGdldF9ub25jZSgmc2VsZiwgYWRkcmVzczogU3RyaW5nLCBibG9jazogQmxvY2tUYWcpIC0+IFJlc3BvbnNlVTY0OwoKICAgIGFzeW5jIGZuIGdldF9ibG9ja19ieV9udW1iZXIoJnNlbGYsIGJsb2NrOiBCbG9ja1RhZywgZnVsbF90eDogYm9vbCkgLT4gUmVzcG9uc2VFeGVjdXRpb25CbG9jazsKICAgIGFzeW5jIGZuIGdldF9ibG9ja19ieV9oYXNoKCZzZWxmLCBoYXNoOiBTdHJpbmcsIGZ1bGxfdHg6IGJvb2wpIC0+IFJlc3BvbnNlRXhlY3V0aW9uQmxvY2s7CiAgICBhc3luYyBmbiBnZXRfYmxvY2tfdHJhbnNhY3Rpb25fY291bnRfYnlfaGFzaCgmc2VsZiwgaGFzaDogU3RyaW5nKSAtPiBSZXNwb25zZVU2NDsKICAgIGFzeW5jIGZuIGdldF9ibG9ja190cmFuc2FjdGlvbl9jb3VudF9ieV9udW1iZXIoJnNlbGYsIGJsb2NrOiBCbG9ja1RhZykgLT4gUmVzcG9uc2VVNjQ7CgogICAgYXN5bmMgZm4gZ2V0X3RyYW5zYWN0aW9uX3JlY2VpcHQoJnNlbGYsIHR4X2hhc2g6IFN0cmluZykgLT4gUmVzcG9uc2VUcmFuc2FjdGlvblJlY2VpcHQ7CiAgICBhc3luYyBmbiBnZXRfdHJhbnNhY3Rpb25fYnlfaGFzaCgmc2VsZiwgdHhfaGFzaDogU3RyaW5nKSAtPiBSZXNwb25zZVRyYW5zYWN0aW9uOwogICAgYXN5bmMgZm4gZ2V0X3RyYW5zYWN0aW9uX2J5X2Jsb2NrX2hhc2hfYW5kX2luZGV4KCZzZWxmLCBibG9ja19oYXNoOiBTdHJpbmcsIGluZGV4OiB1c2l6ZSkgLT4gUmVzcG9uc2VUcmFuc2FjdGlvbjsKICAgIAogICAgYXN5bmMgZm4gZ2V0X2xvZ3MoJnNlbGYsIGZpbHRlcjogTG9nRmlsdGVyKSAtPiBSZXNwb25zZVZlY0xvZzsKCiAgICBhc3luYyBmbiBnZXRfY29kZSgmc2VsZiwgYWRkcmVzczogU3RyaW5nLCBibG9jazogQmxvY2tUYWcpIC0+IFJlc3BvbnNlVmVjODsKICAgIGFzeW5jIGZuIGdldF9zdG9yYWdlX2F0KAogICAgICAmc2VsZiwKICAgICAgYWRkcmVzczogU3RyaW5nLAogICAgICBzbG90OiBTdHJpbmcsCiAgICAgIGJsb2NrOiBCbG9ja1RhZywKICAgICkgLT4gUmVzcG9uc2VTdHJpbmc7CgogICAgYXN5bmMgZm4gZ2V0X2hlYWRlcigmc2VsZikgLT4gUmVzcG9uc2VIZWFkZXI7CiAgfQp9CgppbXBsIEhlbGlvc0NsaWVudCB7CgogIHB1YiBmbiBuZXcoKSAtPiBIZWxpb3NDbGllbnQgewogICAgSGVsaW9zQ2xpZW50IHsKICAgICAgY2xpZW50OiBOb25lLAogICAgICBpc19sb2dnaW5nOiBmYWxzZSwKICAgIH0KICB9CgogIGFzeW5jIGZuIHN0YXJ0KAogICAgJm11dCBzZWxmLAogICAgdW50cnVzdGVkX3JwY191cmw6IFN0cmluZywKICAgIGNvbnNlbnN1c19ycGNfdXJsOiBTdHJpbmcsCiAgICBjaGVja3BvaW50OiBPcHRpb248U3RyaW5nPiwKICAgIHJwY19wb3J0OiB1MTYsCiAgICBuZXR3b3JrOiBmZmk6OkhlbGlvc05ldHdvcmssCiAgICBkYXRhX2RpcjogT3B0aW9uPFN0cmluZz4sCiAgKSAtPiBmZmk6OlN0YXJ0VXBTdGF0ZSB7CiAgICBpZiBsZXQgU29tZShfY2xpZW50KSA9ICZzZWxmLmNsaWVudCB7CiAgICAgIHJldHVybiBmZmk6OlN0YXJ0VXBTdGF0ZSB7CiAgICAgICAgc3RhcnRlZDogZmFsc2UsCiAgICAgICAgZXJyb3I6ICJDbGllbnQgaGFzIGFscmVhZHkgc3RhcnRlZC4iLnRvX3N0cmluZygpLAogICAgICB9OwogICAgfQoKICAgIGlmICFzZWxmLmlzX2xvZ2dpbmcgewogICAgICBzZWxmLmlzX2xvZ2dpbmcgPSB0cnVlOwogICAgICBlbnZfbG9nZ2VyOjppbml0KCk7CiAgICB9CgogICAgbGV0IG11dCBjbGllbnRfYnVpbGRlciA9IENsaWVudEJ1aWxkZXI6Om5ldygpCiAgICAgIC5uZXR3b3JrKG5ldHdvcmsudG9fYmFzZV9uZXR3b3JrKCkpCiAgICAgIC5leGVjdXRpb25fcnBjKCZ1bnRydXN0ZWRfcnBjX3VybCkKICAgICAgLmNvbnNlbnN1c19ycGMoJmNvbnNlbnN1c19ycGNfdXJsKQogICAgICAucnBjX3BvcnQocnBjX3BvcnQpOwogICAgCiAgICBpZiBsZXQgU29tZShjaGVja3BvaW50KSA9ICZjaGVja3BvaW50IHsKICAgICAgY2xpZW50X2J1aWxkZXIgPSBjbGllbnRfYnVpbGRlci5jaGVja3BvaW50KCZjaGVja3BvaW50KTsKICAgIH0KCiAgICBpZiBsZXQgU29tZShkYXRhX2RpcikgPSAmZGF0YV9kaXIgewogICAgICBjbGllbnRfYnVpbGRlciA9IGNsaWVudF9idWlsZGVyLmRhdGFfZGlyKCgmZGF0YV9kaXIpLmludG8oKSk7CiAgICB9CgogICAgbWF0Y2ggY2xpZW50X2J1aWxkZXIuYnVpbGQoKSB7CiAgICAgIEVycihlcnJvcikgPT4gcmV0dXJuIGZmaTo6U3RhcnRVcFN0YXRlIHsKICAgICAgICBzdGFydGVkOiBmYWxzZSwKICAgICAgICBlcnJvcjogZXJyb3IudG9fc3RyaW5nKCksCiAgICAgIH0sCiAgICAgIE9rKG11dCBjbGllbnQpID0+IHsKICAgICAgICBtYXRjaCBjbGllbnQuc3RhcnQoKS5hd2FpdCB7CiAgICAgICAgICBFcnIoZXJyb3IpID0+IHJldHVybiBmZmk6OlN0YXJ0VXBTdGF0ZSB7CiAgICAgICAgICAgIHN0YXJ0ZWQ6IGZhbHNlLAogICAgICAgICAgICBlcnJvcjogZXJyb3IudG9fc3RyaW5nKCksCiAgICAgICAgICB9LAogICAgICAgICAgT2soKCkpID0+IHsKICAgICAgICAgICAgc2VsZi5jbGllbnQgPSBTb21lKGNsaWVudCk7CiAgICAgICAgICAgIHJldHVybiBmZmk6OlN0YXJ0VXBTdGF0ZSB7CiAgICAgICAgICAgICAgc3RhcnRlZDogdHJ1ZSwKICAgICAgICAgICAgICBlcnJvcjogIiIudG9fc3RyaW5nKCksCiAgICAgICAgICAgIH07CiAgICAgICAgICB9LAogICAgICAgIH0KICAgICAgfSwKICAgIH0KICB9CgogIGFzeW5jIGZuIHNodXRkb3duKCZtdXQgc2VsZikgewogICAgaWYgbGV0IFNvbWUoY2xpZW50KSA9ICZzZWxmLmNsaWVudCB7CiAgICAgIGNsaWVudC5zaHV0ZG93bigpLmF3YWl0OwogICAgICBzZWxmLmNsaWVudCA9IE5vbmU7CiAgICB9CiAgfQoKICBhc3luYyBmbiBjYWxsKCZzZWxmLCBvcHRzOiBmZmk6OkNhbGxPcHRzLCBibG9jazogZmZpOjpCbG9ja1RhZykgLT4gZmZpOjpSZXNwb25zZVZlYzggewogICAgaWYgbGV0IFNvbWUoY2xpZW50KSA9ICZzZWxmLmNsaWVudCB7CiAgICAgIG1hdGNoICZvcHRzLnRvX2Jhc2Vfb3B0cygpIHsKICAgICAgICBPayhvcHRzKSA9PiB7CiAgICAgICAgICBtYXRjaCBjbGllbnQuY2FsbChvcHRzLCBibG9jay50b19iYXNlX2Jsb2NrKCkpLmF3YWl0IHsKICAgICAgICAgICAgT2soZGF0YSkgPT4gZmZpOjpSZXNwb25zZVZlYzggewogICAgICAgICAgICAgIHZhbHVlOiBkYXRhLAogICAgICAgICAgICAgIGZhaWxlZDogZmFsc2UsCiAgICAgICAgICAgICAgZXJyb3I6ICIiLnRvX3N0cmluZygpLAogICAgICAgICAgICB9LAogICAgICAgICAgICBFcnIoZXJyb3IpID0+IGZmaTo6UmVzcG9uc2VWZWM4IHsKICAgICAgICAgICAgICB2YWx1ZTogW10uaW50bygpLAogICAgICAgICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICAgICAgICBlcnJvcjogZXJyb3IudG9fc3RyaW5nKCksCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIEVycihlcnJvcikgPT4gZmZpOjpSZXNwb25zZVZlYzggewogICAgICAgICAgdmFsdWU6IFtdLmludG8oKSwKICAgICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICAgIGVycm9yOiBmb3JtYXQhKCJJbnZhbGlkIGNhbGwgb3B0aW9uczoge30iLCBlcnJvciksCiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmZmk6OlJlc3BvbnNlVmVjOCB7CiAgICAgICAgdmFsdWU6IFtdLmludG8oKSwKICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgZXJyb3I6ICJIZWxpb3MgY2xpZW50IHdhc24ndCBzdGFydGVkLiIudG9fc3RyaW5nKCksCiAgICAgIH0KICAgIH0KICB9CgogIGFzeW5jIGZuIHNlbmRfcmF3X3RyYW5zYWN0aW9uKCZzZWxmLCBieXRlczogVmVjPHU4PikgLT4gZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICBpZiBsZXQgU29tZShjbGllbnQpID0gJnNlbGYuY2xpZW50IHsKICAgICAgbWF0Y2ggY2xpZW50LnNlbmRfcmF3X3RyYW5zYWN0aW9uKCZieXRlcykuYXdhaXQgewogICAgICAgIE9rKGhhc2gpID0+IGZmaTo6UmVzcG9uc2VTdHJpbmcgewogICAgICAgICAgdmFsdWU6IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZShoYXNoKSksCiAgICAgICAgICBmYWlsZWQ6IGZhbHNlLAogICAgICAgICAgZXJyb3I6ICIiLnRvX3N0cmluZygpLAogICAgICAgIH0sCiAgICAgICAgRXJyKGVycikgPT4gZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICAgICAgICB2YWx1ZTogIiIudG9fc3RyaW5nKCksCiAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICBlcnJvcjogZXJyLnRvX3N0cmluZygpLAogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICAgICAgdmFsdWU6ICIiLnRvX3N0cmluZygpLAogICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICBlcnJvcjogIkhlbGlvcyBjbGllbnQgd2Fzbid0IHN0YXJ0ZWQuIi50b19zdHJpbmcoKSwKICAgICAgfQogICAgfQogIH0KCiAgYXN5bmMgZm4gZXN0aW1hdGVfZ2FzKCZzZWxmLCBvcHRzOiBmZmk6OkNhbGxPcHRzKSAtPiBmZmk6OlJlc3BvbnNlVTY0IHsKICAgIGlmIGxldCBTb21lKGNsaWVudCkgPSAmc2VsZi5jbGllbnQgewogICAgICBtYXRjaCAmb3B0cy50b19iYXNlX29wdHMoKSB7CiAgICAgICAgT2sob3B0cykgPT4gewogICAgICAgICAgbWF0Y2ggY2xpZW50LmVzdGltYXRlX2dhcygmb3B0cykuYXdhaXQgewogICAgICAgICAgICBPayhnYXMpID0+IGZmaTo6UmVzcG9uc2VVNjQgewogICAgICAgICAgICAgIHZhbHVlOiBnYXMsCiAgICAgICAgICAgICAgZmFpbGVkOiBmYWxzZSwKICAgICAgICAgICAgICBlcnJvcjogIiIudG9fc3RyaW5nKCksCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEVycihlcnJvcikgPT4gZmZpOjpSZXNwb25zZVU2NCB7CiAgICAgICAgICAgICAgdmFsdWU6IDAsCiAgICAgICAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgICAgICAgIGVycm9yOiBlcnJvci50b19zdHJpbmcoKSwKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgRXJyKGVycm9yKSA9PiBmZmk6OlJlc3BvbnNlVTY0IHsKICAgICAgICAgIHZhbHVlOiAwLAogICAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgICAgZXJyb3I6IGZvcm1hdCEoIkludmFsaWQgY2FsbCBvcHRpb25zOiB7fSIsIGVycm9yKSwKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZmaTo6UmVzcG9uc2VVNjQgewogICAgICAgIHZhbHVlOiAwLAogICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICBlcnJvcjogIkhlbGlvcyBjbGllbnQgd2Fzbid0IHN0YXJ0ZWQuIi50b19zdHJpbmcoKSwKICAgICAgfQogICAgfQogIH0KCiAgYXN5bmMgZm4gY2hhaW5faWQoJnNlbGYpIC0+IGZmaTo6UmVzcG9uc2VVNjQgewogICAgaWYgbGV0IFNvbWUoY2xpZW50KSA9ICZzZWxmLmNsaWVudCB7CiAgICAgIGZmaTo6UmVzcG9uc2VVNjQgewogICAgICAgIHZhbHVlOiBjbGllbnQuY2hhaW5faWQoKS5hd2FpdCwKICAgICAgICBmYWlsZWQ6IGZhbHNlLAogICAgICAgIGVycm9yOiAiIi50b19zdHJpbmcoKSwKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZmZpOjpSZXNwb25zZVU2NCB7CiAgICAgICAgdmFsdWU6IDAsCiAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgIGVycm9yOiAiSGVsaW9zIGNsaWVudCB3YXNuJ3Qgc3RhcnRlZC4iLnRvX3N0cmluZygpLAogICAgICB9CiAgICB9CiAgfQogIGFzeW5jIGZuIGdldF9nYXNfcHJpY2UoJnNlbGYpIC0+IGZmaTo6UmVzcG9uc2VTdHJpbmcgewogICAgaWYgbGV0IFNvbWUoY2xpZW50KSA9ICZzZWxmLmNsaWVudCB7CiAgICAgIG1hdGNoIGNsaWVudC5nZXRfZ2FzX3ByaWNlKCkuYXdhaXQgewogICAgICAgIE9rKGdhc19wcmljZSkgPT4gZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICAgICAgICB2YWx1ZTogZ2FzX3ByaWNlLnRvX3N0cmluZygpLAogICAgICAgICAgZmFpbGVkOiBmYWxzZSwKICAgICAgICAgIGVycm9yOiAiIi50b19zdHJpbmcoKSwKICAgICAgICB9LAogICAgICAgIEVycihlcnJvcikgPT4gZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICAgICAgICB2YWx1ZTogIiIudG9fc3RyaW5nKCksCiAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICBlcnJvcjogZXJyb3IudG9fc3RyaW5nKCkKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZmaTo6UmVzcG9uc2VTdHJpbmcgewogICAgICAgIHZhbHVlOiAiIi50b19zdHJpbmcoKSwKICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgZXJyb3I6ICJIZWxpb3MgY2xpZW50IHdhc24ndCBzdGFydGVkLiIudG9fc3RyaW5nKCksCiAgICAgIH0KICAgIH0KICB9CiAgCiAgYXN5bmMgZm4gZ2V0X3ByaW9yaXR5X2ZlZSgmc2VsZikgLT4gZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICBpZiBsZXQgU29tZShjbGllbnQpID0gJnNlbGYuY2xpZW50IHsKICAgICAgbWF0Y2ggY2xpZW50LmdldF9wcmlvcml0eV9mZWUoKS5hd2FpdCB7CiAgICAgICAgT2socHJpb3JpdHlfZmVlKSA9PiBmZmk6OlJlc3BvbnNlU3RyaW5nIHsKICAgICAgICAgIHZhbHVlOiBwcmlvcml0eV9mZWUudG9fc3RyaW5nKCksCiAgICAgICAgICBmYWlsZWQ6IGZhbHNlLAogICAgICAgICAgZXJyb3I6ICIiLnRvX3N0cmluZygpLAogICAgICAgIH0sCiAgICAgICAgRXJyKGVycm9yKSA9PiBmZmk6OlJlc3BvbnNlU3RyaW5nIHsKICAgICAgICAgIHZhbHVlOiAiIi50b19zdHJpbmcoKSwKICAgICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICAgIGVycm9yOiBlcnJvci50b19zdHJpbmcoKQogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICAgICAgdmFsdWU6ICIiLnRvX3N0cmluZygpLAogICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICBlcnJvcjogIkhlbGlvcyBjbGllbnQgd2Fzbid0IHN0YXJ0ZWQuIi50b19zdHJpbmcoKSwKICAgICAgfQogICAgfQogIH0KICAKICBhc3luYyBmbiBnZXRfYmxvY2tfbnVtYmVyKCZzZWxmKSAtPiBmZmk6OlJlc3BvbnNlVTY0IHsKICAgIGlmIGxldCBTb21lKGNsaWVudCkgPSAmc2VsZi5jbGllbnQgewogICAgICBtYXRjaCBjbGllbnQuZ2V0X2Jsb2NrX251bWJlcigpLmF3YWl0IHsKICAgICAgICBPayhibG9jaykgPT4gZmZpOjpSZXNwb25zZVU2NCB7CiAgICAgICAgICB2YWx1ZTogYmxvY2ssCiAgICAgICAgICBmYWlsZWQ6IGZhbHNlLAogICAgICAgICAgZXJyb3I6ICIiLnRvX3N0cmluZygpLAogICAgICAgIH0sCiAgICAgICAgRXJyKGVycm9yKSA9PiBmZmk6OlJlc3BvbnNlVTY0IHsKICAgICAgICAgIHZhbHVlOiAwLAogICAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgICAgZXJyb3I6IGVycm9yLnRvX3N0cmluZygpLAogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZmZpOjpSZXNwb25zZVU2NCB7CiAgICAgICAgdmFsdWU6IDAsCiAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgIGVycm9yOiAiSGVsaW9zIGNsaWVudCB3YXNuJ3Qgc3RhcnRlZC4iLnRvX3N0cmluZygpLAogICAgICB9CiAgICB9CiAgfQoKICBhc3luYyBmbiBnZXRfY29pbmJhc2UoJnNlbGYpIC0+IGZmaTo6UmVzcG9uc2VTdHJpbmcgewogICAgaWYgbGV0IFNvbWUoY2xpZW50KSA9ICZzZWxmLmNsaWVudCB7CiAgICAgIG1hdGNoIGNsaWVudC5nZXRfY29pbmJhc2UoKS5hd2FpdCB7CiAgICAgICAgT2soY29pbmJhc2UpID0+IGZmaTo6UmVzcG9uc2VTdHJpbmcgewogICAgICAgICAgdmFsdWU6IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZShjb2luYmFzZS5hc19ieXRlcygpKSksCiAgICAgICAgICBmYWlsZWQ6IGZhbHNlLAogICAgICAgICAgZXJyb3I6ICIiLnRvX3N0cmluZygpLAogICAgICAgIH0sCiAgICAgICAgRXJyKGVycm9yKSA9PiBmZmk6OlJlc3BvbnNlU3RyaW5nIHsKICAgICAgICAgIHZhbHVlOiAiIi50b19zdHJpbmcoKSwKICAgICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICAgIGVycm9yOiBlcnJvci50b19zdHJpbmcoKSwKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZmaTo6UmVzcG9uc2VTdHJpbmcgewogICAgICAgIHZhbHVlOiAiIi50b19zdHJpbmcoKSwKICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgZXJyb3I6ICJIZWxpb3MgY2xpZW50IHdhc24ndCBzdGFydGVkLiIudG9fc3RyaW5nKCksCiAgICAgIH0KICAgIH0KICB9CgogIGFzeW5jIGZuIGdldF9iYWxhbmNlKCZzZWxmLCBhZGRyZXNzOiBTdHJpbmcsIGJsb2NrOiBmZmk6OkJsb2NrVGFnKSAtPiBmZmk6OlJlc3BvbnNlU3RyaW5nIHsKICAgIGlmIGxldCBTb21lKGNsaWVudCkgPSAmc2VsZi5jbGllbnQgewogICAgICBtYXRjaCBhZGRyZXNzX2Zyb21fc3RyaW5nKGFkZHJlc3MpIHsKICAgICAgICBPayhhZGRyZXNzKSA9PiB7CiAgICAgICAgICBtYXRjaCBjbGllbnQuZ2V0X2JhbGFuY2UoJmFkZHJlc3MsIGJsb2NrLnRvX2Jhc2VfYmxvY2soKSkuYXdhaXQgewogICAgICAgICAgICBPayhiYWxhbmNlKSA9PiBmZmk6OlJlc3BvbnNlU3RyaW5nIHsKICAgICAgICAgICAgICB2YWx1ZTogYmFsYW5jZS50b19zdHJpbmcoKSwKICAgICAgICAgICAgICBmYWlsZWQ6IGZhbHNlLAogICAgICAgICAgICAgIGVycm9yOiAiIi50b19zdHJpbmcoKSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgRXJyKGVycm9yKSA9PiBmZmk6OlJlc3BvbnNlU3RyaW5nIHsKICAgICAgICAgICAgICB2YWx1ZTogIiIudG9fc3RyaW5nKCksCiAgICAgICAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgICAgICAgIGVycm9yOiBlcnJvci50b19zdHJpbmcoKSwKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgRXJyKGVycm9yKSA9PiBmZmk6OlJlc3BvbnNlU3RyaW5nIHsKICAgICAgICAgIHZhbHVlOiAiIi50b19zdHJpbmcoKSwKICAgICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICAgIGVycm9yOiBmb3JtYXQhKCJJbnZhbGlkIGFkZHJlc3M6IHt9IiwgZXJyb3IpLAogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICAgICAgdmFsdWU6ICIiLnRvX3N0cmluZygpLAogICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICBlcnJvcjogIkhlbGlvcyBjbGllbnQgd2Fzbid0IHN0YXJ0ZWQuIi50b19zdHJpbmcoKSwKICAgICAgfQogICAgfQogIH0KCiAgYXN5bmMgZm4gZ2V0X25vbmNlKCZzZWxmLCBhZGRyZXNzOiBTdHJpbmcsIGJsb2NrOiBmZmk6OkJsb2NrVGFnKSAtPiBmZmk6OlJlc3BvbnNlVTY0IHsKICAgIGlmIGxldCBTb21lKGNsaWVudCkgPSAmc2VsZi5jbGllbnQgewogICAgICBtYXRjaCBhZGRyZXNzX2Zyb21fc3RyaW5nKGFkZHJlc3MpIHsKICAgICAgICBPayhhZGRyZXNzKSA9PiB7CiAgICAgICAgICBtYXRjaCBjbGllbnQuZ2V0X25vbmNlKCZhZGRyZXNzLCBibG9jay50b19iYXNlX2Jsb2NrKCkpLmF3YWl0IHsKICAgICAgICAgICAgT2sobm9uY2UpID0+IGZmaTo6UmVzcG9uc2VVNjQgewogICAgICAgICAgICAgIHZhbHVlOiBub25jZSwKICAgICAgICAgICAgICBmYWlsZWQ6IGZhbHNlLAogICAgICAgICAgICAgIGVycm9yOiAiIi50b19zdHJpbmcoKSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgRXJyKGVycm9yKSA9PiBmZmk6OlJlc3BvbnNlVTY0IHsKICAgICAgICAgICAgICB2YWx1ZTogMCwKICAgICAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLnRvX3N0cmluZygpLAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBFcnIoZXJyb3IpID0+IGZmaTo6UmVzcG9uc2VVNjQgewogICAgICAgICAgdmFsdWU6IDAsCiAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICBlcnJvcjogZm9ybWF0ISgiSW52YWxpZCBhZGRyZXNzOiB7fSIsIGVycm9yKSwKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZmaTo6UmVzcG9uc2VVNjQgewogICAgICAgIHZhbHVlOiAwLAogICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICBlcnJvcjogIkhlbGlvcyBjbGllbnQgd2Fzbid0IHN0YXJ0ZWQuIi50b19zdHJpbmcoKSwKICAgICAgfQogICAgfQogIH0KCiAgYXN5bmMgZm4gZ2V0X2Jsb2NrX2J5X251bWJlcigmc2VsZiwgYmxvY2s6IGZmaTo6QmxvY2tUYWcsIGZ1bGxfdHg6IGJvb2wpIC0+IGZmaTo6UmVzcG9uc2VFeGVjdXRpb25CbG9jayB7CiAgICBpZiBsZXQgU29tZShjbGllbnQpID0gJnNlbGYuY2xpZW50IHsKICAgICAgbWF0Y2ggY2xpZW50LmdldF9ibG9ja19ieV9udW1iZXIoYmxvY2sudG9fYmFzZV9ibG9jaygpLCBmdWxsX3R4KS5hd2FpdCB7CiAgICAgICAgT2soYmxvY2spID0+IGZmaTo6UmVzcG9uc2VFeGVjdXRpb25CbG9jayB7CiAgICAgICAgICB2YWx1ZTogYmxvY2subWFwKGhlbGlvc19leGVjdXRpb25fYmxvY2tfdG9fZmZpKSwKICAgICAgICAgIGZhaWxlZDogZmFsc2UsCiAgICAgICAgICBlcnJvcjogIiIudG9fc3RyaW5nKCksCiAgICAgICAgfSwKICAgICAgICBFcnIoZXJyKSA9PiBmZmk6OlJlc3BvbnNlRXhlY3V0aW9uQmxvY2sgewogICAgICAgICAgdmFsdWU6IE5vbmUsCiAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICBlcnJvcjogZXJyLnRvX3N0cmluZygpLAogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZmZpOjpSZXNwb25zZUV4ZWN1dGlvbkJsb2NrIHsKICAgICAgICB2YWx1ZTogTm9uZSwKICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgZXJyb3I6ICJIZWxpb3MgY2xpZW50IHdhc24ndCBzdGFydGVkLiIudG9fc3RyaW5nKCksCiAgICAgIH0KICAgIH0KICB9CiAgICAKICBhc3luYyBmbiBnZXRfYmxvY2tfYnlfaGFzaCgmc2VsZiwgaGFzaDogU3RyaW5nLCBmdWxsX3R4OiBib29sKSAtPiBmZmk6OlJlc3BvbnNlRXhlY3V0aW9uQmxvY2sgewogICAgaWYgbGV0IFNvbWUoY2xpZW50KSA9ICZzZWxmLmNsaWVudCB7CiAgICAgIG1hdGNoIGgyNTZfZnJvbV9zdHJpbmcoaGFzaCkgewogICAgICAgIE9rKGhhc2gpID0+IHsKICAgICAgICAgIG1hdGNoIGNsaWVudC5nZXRfYmxvY2tfYnlfaGFzaCgmaGFzaC5hc19ieXRlcygpLnRvX3ZlYygpLCBmdWxsX3R4KS5hd2FpdCB7CiAgICAgICAgICAgIE9rKGJsb2NrKSA9PiBmZmk6OlJlc3BvbnNlRXhlY3V0aW9uQmxvY2sgewogICAgICAgICAgICAgIHZhbHVlOiBibG9jay5tYXAoaGVsaW9zX2V4ZWN1dGlvbl9ibG9ja190b19mZmkpLAogICAgICAgICAgICAgIGZhaWxlZDogZmFsc2UsCiAgICAgICAgICAgICAgZXJyb3I6ICIiLnRvX3N0cmluZygpLAogICAgICAgICAgICB9LAogICAgICAgICAgICBFcnIoZXJyKSA9PiBmZmk6OlJlc3BvbnNlRXhlY3V0aW9uQmxvY2sgewogICAgICAgICAgICAgIHZhbHVlOiBOb25lLAogICAgICAgICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICAgICAgICBlcnJvcjogZXJyLnRvX3N0cmluZygpLAogICAgICAgICAgICB9LAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgRXJyKGVycikgPT4gZmZpOjpSZXNwb25zZUV4ZWN1dGlvbkJsb2NrIHsKICAgICAgICAgIHZhbHVlOiBOb25lLAogICAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgICAgZXJyb3I6IGZvcm1hdCEoIkJsb2NrIGhhc2g6IHt9IiwgZXJyKSwKICAgICAgICB9LAogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmZmk6OlJlc3BvbnNlRXhlY3V0aW9uQmxvY2sgewogICAgICAgIHZhbHVlOiBOb25lLAogICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICBlcnJvcjogIkhlbGlvcyBjbGllbnQgd2Fzbid0IHN0YXJ0ZWQuIi50b19zdHJpbmcoKSwKICAgICAgfQogICAgfQogIH0KCiAgYXN5bmMgZm4gZ2V0X2Jsb2NrX3RyYW5zYWN0aW9uX2NvdW50X2J5X2hhc2goJnNlbGYsIGhhc2g6IFN0cmluZykgLT4gZmZpOjpSZXNwb25zZVU2NCB7CiAgICBpZiBsZXQgT2soaGFzaCkgPSBoZXg6OmRlY29kZShoYXNoLnN0cmlwX3ByZWZpeCgiMHgiKS51bndyYXBfb3IoIiIpKSB7CiAgICAgIGlmIGxldCBTb21lKGNsaWVudCkgPSAmc2VsZi5jbGllbnQgewogICAgICAgIG1hdGNoIGNsaWVudC5nZXRfYmxvY2tfdHJhbnNhY3Rpb25fY291bnRfYnlfaGFzaCgmaGFzaCkuYXdhaXQgewogICAgICAgICAgT2soY291bnQpID0+IGZmaTo6UmVzcG9uc2VVNjQgewogICAgICAgICAgICB2YWx1ZTogY291bnQsCiAgICAgICAgICAgIGZhaWxlZDogZmFsc2UsCiAgICAgICAgICAgIGVycm9yOiAiIi50b19zdHJpbmcoKSwKICAgICAgICAgIH0sCiAgICAgICAgICBFcnIoZXJyb3IpID0+IGZmaTo6UmVzcG9uc2VVNjQgewogICAgICAgICAgICB2YWx1ZTogMCwKICAgICAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgICAgICBlcnJvcjogZXJyb3IudG9fc3RyaW5nKCksCiAgICAgICAgICB9LAogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBmZmk6OlJlc3BvbnNlVTY0IHsKICAgICAgICAgIHZhbHVlOiAwLAogICAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgICAgZXJyb3I6ICJIZWxpb3MgY2xpZW50IHdhc24ndCBzdGFydGVkLiIudG9fc3RyaW5nKCksCiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmZmk6OlJlc3BvbnNlVTY0IHsKICAgICAgICB2YWx1ZTogMCwKICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgZXJyb3I6ICJJbnZhbGlkIGhhc2giLnRvX3N0cmluZygpLAogICAgICB9CiAgICB9CiAgfQoKICBhc3luYyBmbiBnZXRfYmxvY2tfdHJhbnNhY3Rpb25fY291bnRfYnlfbnVtYmVyKCZzZWxmLCBibG9jazogZmZpOjpCbG9ja1RhZykgLT4gZmZpOjpSZXNwb25zZVU2NCB7CiAgICBpZiBsZXQgU29tZShjbGllbnQpID0gJnNlbGYuY2xpZW50IHsKICAgICAgbWF0Y2ggY2xpZW50LmdldF9ibG9ja190cmFuc2FjdGlvbl9jb3VudF9ieV9udW1iZXIoYmxvY2sudG9fYmFzZV9ibG9jaygpKS5hd2FpdCB7CiAgICAgICAgT2soY291bnQpID0+IGZmaTo6UmVzcG9uc2VVNjQgewogICAgICAgICAgdmFsdWU6IGNvdW50LAogICAgICAgICAgZmFpbGVkOiBmYWxzZSwKICAgICAgICAgIGVycm9yOiAiIi50b19zdHJpbmcoKSwKICAgICAgICB9LAogICAgICAgIEVycihlcnJvcikgPT4gZmZpOjpSZXNwb25zZVU2NCB7CiAgICAgICAgICB2YWx1ZTogMCwKICAgICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICAgIGVycm9yOiBlcnJvci50b19zdHJpbmcoKSwKICAgICAgICB9LAogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmZmk6OlJlc3BvbnNlVTY0IHsKICAgICAgICB2YWx1ZTogMCwKICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgZXJyb3I6ICJIZWxpb3MgY2xpZW50IHdhc24ndCBzdGFydGVkLiIudG9fc3RyaW5nKCksCiAgICAgIH0KICAgIH0KICB9CgogIGFzeW5jIGZuIGdldF90cmFuc2FjdGlvbl9yZWNlaXB0KCZzZWxmLCB0eF9oYXNoOiBTdHJpbmcpIC0+IGZmaTo6UmVzcG9uc2VUcmFuc2FjdGlvblJlY2VpcHQgewogICAgaWYgbGV0IFNvbWUoY2xpZW50KSA9ICZzZWxmLmNsaWVudCB7CiAgICAgIG1hdGNoIGgyNTZfZnJvbV9zdHJpbmcodHhfaGFzaCkgewogICAgICAgIE9rKHR4X2hhc2gpID0+IHsKICAgICAgICAgIG1hdGNoIGNsaWVudC5nZXRfdHJhbnNhY3Rpb25fcmVjZWlwdCgmdHhfaGFzaCkuYXdhaXQgewogICAgICAgICAgICBPayhyZWNlaXB0KSA9PiBmZmk6OlJlc3BvbnNlVHJhbnNhY3Rpb25SZWNlaXB0IHsKICAgICAgICAgICAgICB2YWx1ZTogcmVjZWlwdC5tYXAoZXRoZXJzX3JlY2VpcHRfdG9fZmZpKSwKICAgICAgICAgICAgICBmYWlsZWQ6IGZhbHNlLAogICAgICAgICAgICAgIGVycm9yOiAiIi50b19zdHJpbmcoKSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgRXJyKGVycm9yKSA9PiBmZmk6OlJlc3BvbnNlVHJhbnNhY3Rpb25SZWNlaXB0IHsKICAgICAgICAgICAgICB2YWx1ZTogTm9uZSwKICAgICAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLnRvX3N0cmluZygpLAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBFcnIoZXJyb3IpID0+IGZmaTo6UmVzcG9uc2VUcmFuc2FjdGlvblJlY2VpcHQgewogICAgICAgICAgdmFsdWU6IE5vbmUsCiAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICBlcnJvcjogZm9ybWF0ISgiVHJhbnNhY3Rpb24gaGFzaDoge30iLCBlcnJvciksCiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBmZmk6OlJlc3BvbnNlVHJhbnNhY3Rpb25SZWNlaXB0IHsKICAgICAgICB2YWx1ZTogTm9uZSwKICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgZXJyb3I6ICJIZWxpb3MgY2xpZW50IHdhc24ndCBzdGFydGVkLiIudG9fc3RyaW5nKCksCiAgICAgIH0KICAgIH0KICB9CgogIGFzeW5jIGZuIGdldF90cmFuc2FjdGlvbl9ieV9oYXNoKCZzZWxmLCB0eF9oYXNoOiBTdHJpbmcpIC0+IGZmaTo6UmVzcG9uc2VUcmFuc2FjdGlvbiB7CiAgICBpZiBsZXQgU29tZShjbGllbnQpID0gJnNlbGYuY2xpZW50IHsKICAgICAgbWF0Y2ggaDI1Nl9mcm9tX3N0cmluZyh0eF9oYXNoKSB7CiAgICAgICAgT2soaGFzaCkgPT4gewogICAgICAgICAgbWF0Y2ggY2xpZW50LmdldF90cmFuc2FjdGlvbl9ieV9oYXNoKCZoYXNoKS5hd2FpdCB7CiAgICAgICAgICAgIE9rKHRyYW5zYWN0aW9uKSA9PiBmZmk6OlJlc3BvbnNlVHJhbnNhY3Rpb24gewogICAgICAgICAgICAgIHZhbHVlOiB0cmFuc2FjdGlvbi5tYXAoZXRoZXJzX3RyYW5zYWN0aW9uX3RvX2ZmaSksCiAgICAgICAgICAgICAgZmFpbGVkOiBmYWxzZSwKICAgICAgICAgICAgICBlcnJvcjogIiIudG9fc3RyaW5nKCksCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIEVycihlcnIpID0+IGZmaTo6UmVzcG9uc2VUcmFuc2FjdGlvbiB7CiAgICAgICAgICAgICAgdmFsdWU6IE5vbmUsCiAgICAgICAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgICAgICAgIGVycm9yOiBlcnIudG9fc3RyaW5nKCksCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBFcnIoZXJyKSA9PiBmZmk6OlJlc3BvbnNlVHJhbnNhY3Rpb24gewogICAgICAgICAgdmFsdWU6IE5vbmUsCiAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICBlcnJvcjogZm9ybWF0ISgiVHJhbnNhY3Rpb24gaGFzaDoge30iLCBlcnIpLAogICAgICAgIH0sCiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZmaTo6UmVzcG9uc2VUcmFuc2FjdGlvbiB7CiAgICAgICAgdmFsdWU6IE5vbmUsCiAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgIGVycm9yOiAiSGVsaW9zIGNsaWVudCB3YXNuJ3Qgc3RhcnRlZC4iLnRvX3N0cmluZygpLAogICAgICB9CiAgICB9CiAgfQoKICBhc3luYyBmbiBnZXRfdHJhbnNhY3Rpb25fYnlfYmxvY2tfaGFzaF9hbmRfaW5kZXgoJnNlbGYsIGJsb2NrX2hhc2g6IFN0cmluZywgaW5kZXg6IHVzaXplKSAtPiBmZmk6OlJlc3BvbnNlVHJhbnNhY3Rpb24gewogICAgaWYgbGV0IFNvbWUoY2xpZW50KSA9ICZzZWxmLmNsaWVudCB7CiAgICAgIG1hdGNoIGgyNTZfZnJvbV9zdHJpbmcoYmxvY2tfaGFzaCkgewogICAgICAgIE9rKGhhc2gpID0+IHsKICAgICAgICAgIG1hdGNoIGNsaWVudC5nZXRfdHJhbnNhY3Rpb25fYnlfYmxvY2tfaGFzaF9hbmRfaW5kZXgoJmhhc2guYXNfYnl0ZXMoKS50b192ZWMoKSwgaW5kZXgpLmF3YWl0IHsKICAgICAgICAgICAgT2sodHJhbnNhY3Rpb24pID0+IGZmaTo6UmVzcG9uc2VUcmFuc2FjdGlvbiB7CiAgICAgICAgICAgICAgdmFsdWU6IHRyYW5zYWN0aW9uLm1hcChldGhlcnNfdHJhbnNhY3Rpb25fdG9fZmZpKSwKICAgICAgICAgICAgICBmYWlsZWQ6IGZhbHNlLAogICAgICAgICAgICAgIGVycm9yOiAiIi50b19zdHJpbmcoKSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgRXJyKGVycikgPT4gZmZpOjpSZXNwb25zZVRyYW5zYWN0aW9uIHsKICAgICAgICAgICAgICB2YWx1ZTogTm9uZSwKICAgICAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICAgICAgZXJyb3I6IGVyci50b19zdHJpbmcoKSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIEVycihlcnIpID0+IGZmaTo6UmVzcG9uc2VUcmFuc2FjdGlvbiB7CiAgICAgICAgICB2YWx1ZTogTm9uZSwKICAgICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICAgIGVycm9yOiBmb3JtYXQhKCJCbG9jayBoYXNoOiB7fSIsIGVyciksCiAgICAgICAgfSwKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZmZpOjpSZXNwb25zZVRyYW5zYWN0aW9uIHsKICAgICAgICB2YWx1ZTogTm9uZSwKICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgZXJyb3I6ICJIZWxpb3MgY2xpZW50IHdhc24ndCBzdGFydGVkLiIudG9fc3RyaW5nKCksCiAgICAgIH0KICAgIH0KICB9CgogIGFzeW5jIGZuIGdldF9sb2dzKCZzZWxmLCBmaWx0ZXI6IGZmaTo6TG9nRmlsdGVyKSAtPiBmZmk6OlJlc3BvbnNlVmVjTG9nIHsKICAgIGlmIGxldCBTb21lKGNsaWVudCkgPSAmc2VsZi5jbGllbnQgewogICAgICBtYXRjaCBmaWx0ZXIudG9fZXRoZXJzX2ZpbHRlcigpIHsKICAgICAgICBPayhmaWx0ZXIpID0+IHsKICAgICAgICAgIG1hdGNoIGNsaWVudC5nZXRfbG9ncygmZmlsdGVyKS5hd2FpdCB7CiAgICAgICAgICAgIE9rKGxvZ3MpID0+IHsKICAgICAgICAgICAgICBmZmk6OlJlc3BvbnNlVmVjTG9nIHsKICAgICAgICAgICAgICAgIHZhbHVlOiBsb2dzLmludG9faXRlcigpLm1hcChldGhlcnNfbG9nX3RvX2ZmaV9sb2cpLmNvbGxlY3QoKSwKICAgICAgICAgICAgICAgIGZhaWxlZDogZmFsc2UsCiAgICAgICAgICAgICAgICBlcnJvcjogIiIudG9fc3RyaW5nKCksCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBFcnIoZXJyKSA9PiBmZmk6OlJlc3BvbnNlVmVjTG9nIHsKICAgICAgICAgICAgICB2YWx1ZTogdmVjIVtdLAogICAgICAgICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICAgICAgICBlcnJvcjogZXJyLnRvX3N0cmluZygpLAogICAgICAgICAgICB9LAogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBFcnIoZXJyKSA9PiBmZmk6OlJlc3BvbnNlVmVjTG9nIHsKICAgICAgICAgIHZhbHVlOiB2ZWMhW10sCiAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICBlcnJvcjogZm9ybWF0ISgiSW52YWxpZCBmaWx0ZXI6IHt9IiwgZXJyKSwKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZmaTo6UmVzcG9uc2VWZWNMb2cgewogICAgICAgIHZhbHVlOiB2ZWMhW10sCiAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgIGVycm9yOiAiSGVsaW9zIGNsaWVudCB3YXNuJ3Qgc3RhcnRlZC4iLnRvX3N0cmluZygpLAogICAgICB9CiAgICB9CiAgfQoKICBhc3luYyBmbiBnZXRfY29kZSgmc2VsZiwgYWRkcmVzczogU3RyaW5nLCBibG9jazogZmZpOjpCbG9ja1RhZykgLT4gZmZpOjpSZXNwb25zZVZlYzggewogICAgaWYgbGV0IFNvbWUoY2xpZW50KSA9ICZzZWxmLmNsaWVudCB7CiAgICAgIG1hdGNoIGFkZHJlc3NfZnJvbV9zdHJpbmcoYWRkcmVzcykgewogICAgICAgIE9rKGFkZHJlc3MpID0+IHsKICAgICAgICAgIG1hdGNoIGNsaWVudC5nZXRfY29kZSgmYWRkcmVzcywgYmxvY2sudG9fYmFzZV9ibG9jaygpKS5hd2FpdCB7CiAgICAgICAgICAgIE9rKGNvZGUpID0+IGZmaTo6UmVzcG9uc2VWZWM4IHsKICAgICAgICAgICAgICB2YWx1ZTogY29kZSwKICAgICAgICAgICAgICBmYWlsZWQ6IGZhbHNlLAogICAgICAgICAgICAgIGVycm9yOiAiIi50b19zdHJpbmcoKSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgRXJyKGVycm9yKSA9PiBmZmk6OlJlc3BvbnNlVmVjOCB7CiAgICAgICAgICAgICAgdmFsdWU6IFtdLmludG8oKSwKICAgICAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLnRvX3N0cmluZygpLAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBFcnIoZXJyb3IpID0+IGZmaTo6UmVzcG9uc2VWZWM4IHsKICAgICAgICAgIHZhbHVlOiBbXS5pbnRvKCksCiAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICBlcnJvcjogZm9ybWF0ISgiSW52YWxpZCBhZGRyZXNzOiB7fSIsIGVycm9yKSwKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZmaTo6UmVzcG9uc2VWZWM4IHsKICAgICAgICB2YWx1ZTogW10uaW50bygpLAogICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICBlcnJvcjogIkhlbGlvcyBjbGllbnQgd2Fzbid0IHN0YXJ0ZWQuIi50b19zdHJpbmcoKSwKICAgICAgfQogICAgfQogIH0KCiAgYXN5bmMgZm4gZ2V0X3N0b3JhZ2VfYXQoCiAgICAmc2VsZiwKICAgIGFkZHJlc3M6IFN0cmluZywKICAgIHNsb3Q6IFN0cmluZywKICAgIGJsb2NrOiBmZmk6OkJsb2NrVGFnLAogICkgLT4gZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICBpZiBsZXQgU29tZShjbGllbnQpID0gJnNlbGYuY2xpZW50IHsKICAgICAgbWF0Y2ggYWRkcmVzc19mcm9tX3N0cmluZyhhZGRyZXNzKSB7CiAgICAgICAgT2soYWRkcmVzcykgPT4gewogICAgICAgICAgbWF0Y2ggaDI1Nl9mcm9tX3N0cmluZyhzbG90KSB7CiAgICAgICAgICAgIE9rKHNsb3QpID0+IHsKICAgICAgICAgICAgICBtYXRjaCBjbGllbnQuZ2V0X3N0b3JhZ2VfYXQoJmFkZHJlc3MsIHNsb3QsIGJsb2NrLnRvX2Jhc2VfYmxvY2soKSkuYXdhaXQgewogICAgICAgICAgICAgICAgT2soc3RvcmFnZSkgPT4gZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBzdG9yYWdlLmVuY29kZV9oZXgoKSwKICAgICAgICAgICAgICAgICAgZmFpbGVkOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgZXJyb3I6ICIiLnRvX3N0cmluZygpLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIEVycihlcnJvcikgPT4gZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiIi50b19zdHJpbmcoKSwKICAgICAgICAgICAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IudG9fc3RyaW5nKCksCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBFcnIoZXJyb3IpID0+IGZmaTo6UmVzcG9uc2VTdHJpbmcgewogICAgICAgICAgICAgIHZhbHVlOiAiIi50b19zdHJpbmcoKSwKICAgICAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICAgICAgZXJyb3I6IGZvcm1hdCEoIkludmFsaWQgc2xvdDoge30iLCBlcnJvciksCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIEVycihlcnJvcikgPT4gZmZpOjpSZXNwb25zZVN0cmluZyB7CiAgICAgICAgICB2YWx1ZTogIiIudG9fc3RyaW5nKCksCiAgICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgICBlcnJvcjogZm9ybWF0ISgiSW52YWxpZCBhZGRyZXNzOiB7fSIsIGVycm9yKSwKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZmaTo6UmVzcG9uc2VTdHJpbmcgewogICAgICAgIHZhbHVlOiAiIi50b19zdHJpbmcoKSwKICAgICAgICBmYWlsZWQ6IHRydWUsCiAgICAgICAgZXJyb3I6ICJIZWxpb3MgY2xpZW50IHdhc24ndCBzdGFydGVkLiIudG9fc3RyaW5nKCksCiAgICAgIH0KICAgIH0KICB9CgogIGFzeW5jIGZuIGdldF9oZWFkZXIoJnNlbGYpIC0+IGZmaTo6UmVzcG9uc2VIZWFkZXIgewogICAgaWYgbGV0IFNvbWUoY2xpZW50KSA9ICZzZWxmLmNsaWVudCB7CiAgICAgIG1hdGNoIGNsaWVudC5nZXRfaGVhZGVyKCkuYXdhaXQgewogICAgICAgIE9rKGhlYWRlcikgPT4gZmZpOjpSZXNwb25zZUhlYWRlciB7CiAgICAgICAgICB2YWx1ZTogU29tZShoZWxpb3NfaGVhZGVyX3RvX2ZmaShoZWFkZXIpKSwKICAgICAgICAgIGZhaWxlZDogZmFsc2UsCiAgICAgICAgICBlcnJvcjogIiIudG9fc3RyaW5nKCksCiAgICAgICAgfSwKICAgICAgICBFcnIoZXJyKSA9PiBmZmk6OlJlc3BvbnNlSGVhZGVyIHsKICAgICAgICAgIHZhbHVlOiBOb25lLAogICAgICAgICAgZmFpbGVkOiB0cnVlLAogICAgICAgICAgZXJyb3I6IGVyci50b19zdHJpbmcoKSwKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGZmaTo6UmVzcG9uc2VIZWFkZXIgewogICAgICAgIHZhbHVlOiBOb25lLAogICAgICAgIGZhaWxlZDogdHJ1ZSwKICAgICAgICBlcnJvcjogIkhlbGlvcyBjbGllbnQgd2Fzbid0IHN0YXJ0ZWQuIi50b19zdHJpbmcoKSwKICAgICAgfQogICAgfQogIH0KfQoKaW1wbCBmZmk6OkhlbGlvc05ldHdvcmsgewoKICBmbiB0b19iYXNlX25ldHdvcmsoJnNlbGYpIC0+IG5ldHdvcmtzOjpOZXR3b3JrIHsKICAgICAgbWF0Y2ggc2VsZiB7CiAgICAgICAgICBTZWxmOjpNQUlOTkVUID0+IG5ldHdvcmtzOjpOZXR3b3JrOjpNQUlOTkVULAogICAgICAgICAgU2VsZjo6R09FUkxJID0+IG5ldHdvcmtzOjpOZXR3b3JrOjpHT0VSTEksCiAgICAgIH0KICB9Cn0KCmltcGwgZmZpOjpCbG9ja1RhZyB7CiAgZm4gdG9fYmFzZV9ibG9jaygmc2VsZikgLT4gY29tbW9uOjp0eXBlczo6QmxvY2tUYWcgewogICAgbWF0Y2ggc2VsZiB7CiAgICAgIFNlbGY6OkZpbmFsaXplZCA9PiBjb21tb246OnR5cGVzOjpCbG9ja1RhZzo6RmluYWxpemVkLAogICAgICBTZWxmOjpMYXRlc3QgPT4gY29tbW9uOjp0eXBlczo6QmxvY2tUYWc6OkxhdGVzdCwKICAgICAgU2VsZjo6U2FmZSA9PiBjb21tb246OnR5cGVzOjpCbG9ja1RhZzo6RmluYWxpemVkLAogICAgICBTZWxmOjpQZW5kaW5nID0+IGNvbW1vbjo6dHlwZXM6OkJsb2NrVGFnOjpMYXRlc3QsCiAgICAgIFNlbGY6OkVhcmxpZXN0ID0+IGNvbW1vbjo6dHlwZXM6OkJsb2NrVGFnOjpOdW1iZXIoMSksCiAgICAgIFNlbGY6Ok51bWJlcihibG9jaykgPT4gY29tbW9uOjp0eXBlczo6QmxvY2tUYWc6Ok51bWJlcigqYmxvY2spLAogICAgfQogIH0KCiAgZm4gdG9fZXRoZXJzX2Jsb2NrKCZzZWxmKSAtPiBCbG9ja051bWJlciB7CiAgICBtYXRjaCBzZWxmIHsKICAgICAgU2VsZjo6RmluYWxpemVkID0+IEJsb2NrTnVtYmVyOjpGaW5hbGl6ZWQsCiAgICAgIFNlbGY6OkxhdGVzdCA9PiBCbG9ja051bWJlcjo6TGF0ZXN0LAogICAgICBTZWxmOjpTYWZlID0+IEJsb2NrTnVtYmVyOjpTYWZlLAogICAgICBTZWxmOjpQZW5kaW5nID0+IEJsb2NrTnVtYmVyOjpQZW5kaW5nLAogICAgICBTZWxmOjpFYXJsaWVzdCA9PiBCbG9ja051bWJlcjo6RWFybGllc3QsCiAgICAgIFNlbGY6Ok51bWJlcihibG9jaykgPT4gQmxvY2tOdW1iZXI6Ok51bWJlcihVNjQ6OmZyb20oKmJsb2NrKSksCiAgICB9CiAgfQp9CgppbXBsIENsb25lIGZvciBmZmk6OkJsb2NrVGFnIHsKICBmbiBjbG9uZSgmc2VsZikgLT4gU2VsZiB7CiAgICBtYXRjaCBzZWxmIHsKICAgICAgU2VsZjo6RmluYWxpemVkID0+IGZmaTo6QmxvY2tUYWc6OkZpbmFsaXplZCwKICAgICAgU2VsZjo6TGF0ZXN0ID0+IGZmaTo6QmxvY2tUYWc6OkxhdGVzdCwKICAgICAgU2VsZjo6U2FmZSA9PiBmZmk6OkJsb2NrVGFnOjpTYWZlLAogICAgICBTZWxmOjpQZW5kaW5nID0+IGZmaTo6QmxvY2tUYWc6OlBlbmRpbmcsCiAgICAgIFNlbGY6OkVhcmxpZXN0ID0+IGZmaTo6QmxvY2tUYWc6OkVhcmxpZXN0LAogICAgICBTZWxmOjpOdW1iZXIoYmxvY2spID0+IGZmaTo6QmxvY2tUYWc6Ok51bWJlcigqYmxvY2spLAogICAgfQogIH0KfQoKaW1wbCBmZmk6OkZpbHRlckJsb2NrT3B0aW9uIHsKICBmbiB0b19ldGhlcnNfYmxvY2tfb3B0aW9uKCZzZWxmKSAtPiBSZXN1bHQ8RmlsdGVyQmxvY2tPcHRpb24sIFN0cmluZz4gewogICAgbWF0Y2ggc2VsZiB7CiAgICAgIFNlbGY6OlJhbmdlIHsgZnJvbV9ibG9jaywgdG9fYmxvY2sgfSA9PiBPayhGaWx0ZXJCbG9ja09wdGlvbjo6UmFuZ2UgeyBmcm9tX2Jsb2NrOiBmcm9tX2Jsb2NrLmFzX3JlZigpLm1hcCh8YmxvY2t8IGJsb2NrLnRvX2V0aGVyc19ibG9jaygpKSwgdG9fYmxvY2s6IHRvX2Jsb2NrLmFzX3JlZigpLm1hcCh8YmxvY2t8IGJsb2NrLnRvX2V0aGVyc19ibG9jaygpKSB9KSwKICAgICAgU2VsZjo6QXRCbG9ja0hhc2goaGFzaCkgPT4gT2soRmlsdGVyQmxvY2tPcHRpb246OkF0QmxvY2tIYXNoKGgyNTZfZnJvbV9zdHJpbmcoaGFzaC50b19zdHJpbmcoKSkubWFwX2Vycih8ZXJyb3J8IGZvcm1hdCEoIkZpbHRlciBibG9jayBoYXNoOiB7fSIsIGVycm9yKSk/KSksCiAgICB9CiAgfQp9CgppbXBsIENsb25lIGZvciBmZmk6OkZpbHRlckJsb2NrT3B0aW9uIHsKICBmbiBjbG9uZSgmc2VsZikgLT4gU2VsZiB7CiAgICBtYXRjaCBzZWxmIHsKICAgICAgU2VsZjo6UmFuZ2UgeyBmcm9tX2Jsb2NrLCB0b19ibG9jayB9ID0+IGZmaTo6RmlsdGVyQmxvY2tPcHRpb246OlJhbmdlIHsgZnJvbV9ibG9jazogZnJvbV9ibG9jay5jbG9uZSgpLCB0b19ibG9jazogdG9fYmxvY2suY2xvbmUoKSB9LAogICAgICBTZWxmOjpBdEJsb2NrSGFzaChoYXNoKSA9PiBmZmk6OkZpbHRlckJsb2NrT3B0aW9uOjpBdEJsb2NrSGFzaChoYXNoLmNsb25lKCkpLAogICAgfQogIH0KfQoKaW1wbCBmZmk6OkxvZ0ZpbHRlciB7CiAgZm4gdG9fZXRoZXJzX2ZpbHRlcigmc2VsZikgLT4gUmVzdWx0PEZpbHRlciwgU3RyaW5nPiB7CiAgICBPaygKICAgICAgRmlsdGVyIHsKICAgICAgICBibG9ja19vcHRpb246IHNlbGYuYmxvY2tfb3B0aW9uLnRvX2V0aGVyc19ibG9ja19vcHRpb24oKT8sCiAgICAgICAgYWRkcmVzczogaWYgc2VsZi5hZGRyZXNzLmlzX2VtcHR5KCkgeyBOb25lIH0gZWxzZSB7IFNvbWUoYWRkcmVzc2VzX2Zyb21fc3RyaW5nKHNlbGYuYWRkcmVzcy5jbG9uZSgpKS5tYXBfZXJyKHxlcnJ8IGZvcm1hdCEoIkZpbHRlciBhZGRyZXNzOiB7fSIsIGVycikpPykgfSwKICAgICAgICB0b3BpY3M6IHRvcGljc19mcm9tX3N0cmluZ3Moc2VsZi50b3BpY3MuY2xvbmUoKSkubWFwX2Vycih8ZXJyfCBmb3JtYXQhKCJGaWx0ZXIgdG9waWNzOiB7fSIsIGVycikpPwogICAgICB9CiAgICApCiAgfQp9CgppbXBsIGZmaTo6Q2FsbE9wdHMgewogIGZuIHRvX2Jhc2Vfb3B0cygmc2VsZikgLT4gUmVzdWx0PGV4ZWN1dGlvbjo6dHlwZXM6OkNhbGxPcHRzLCBTdHJpbmc+IHsKICAgIE9rKGV4ZWN1dGlvbjo6dHlwZXM6OkNhbGxPcHRzIHsKICAgICAgZnJvbTogaWYgc2VsZi5mcm9tLmlzX2VtcHR5KCkgeyBOb25lIH0gZWxzZSB7IFNvbWUoYWRkcmVzc19mcm9tX3N0cmluZyhzZWxmLmZyb20uY2xvbmUoKSkubWFwX2Vycih8ZXJyfCBmb3JtYXQhKCJmcm9tOiB7fSIsIGVycikpPykgfSwKICAgICAgdG86IGFkZHJlc3NfZnJvbV9zdHJpbmcoc2VsZi50by5jbG9uZSgpKS5tYXBfZXJyKHxlcnJ8IGZvcm1hdCEoInRvOiB7fSIsIGVycikpPywKICAgICAgZ2FzOiBpZiBzZWxmLmdhcy5pc19lbXB0eSgpIHsgTm9uZSB9IGVsc2UgeyBTb21lKHUyNTZfZnJvbV9zdHJpbmcoc2VsZi5nYXMuY2xvbmUoKSkubWFwX2Vycih8ZXJyfCBmb3JtYXQhKCJnYXM6IHt9IiwgZXJyKSk/KSB9LAogICAgICBnYXNfcHJpY2U6IGlmIHNlbGYuZ2FzX3ByaWNlLmlzX2VtcHR5KCkgeyBOb25lIH0gZWxzZSB7IFNvbWUodTI1Nl9mcm9tX3N0cmluZyhzZWxmLmdhc19wcmljZS5jbG9uZSgpKS5tYXBfZXJyKHxlcnJ8IGZvcm1hdCEoImdhc19wcmljZToge30iLCBlcnIpKT8pIH0sCiAgICAgIHZhbHVlOiBpZiBzZWxmLnZhbHVlLmlzX2VtcHR5KCkgeyBOb25lIH0gZWxzZSB7IFNvbWUodTI1Nl9mcm9tX3N0cmluZyhzZWxmLnZhbHVlLmNsb25lKCkpLm1hcF9lcnIofGVycnwgZm9ybWF0ISgidmFsdWU6IHt9IiwgZXJyKSk/KSB9LAogICAgICBkYXRhOiBpZiBzZWxmLmRhdGEuaXNfZW1wdHkoKSB7IE5vbmUgfSBlbHNlIHsgU29tZSh2ZWM4X2Zyb21fc3RyaW5nKHNlbGYuZGF0YS5jbG9uZSgpKS5tYXBfZXJyKHxlcnJ8IGZvcm1hdCEoImRhdGE6IHt9IiwgZXJyKSk/KSB9LAogICAgfSkKICB9Cn0KCmltcGwgQ2xvbmUgZm9yIGZmaTo6VHJhbnNhY3Rpb25zIHsKICBmbiBjbG9uZSgmc2VsZikgLT4gU2VsZiB7CiAgICBtYXRjaCBzZWxmIHsKICAgICAgU2VsZjo6SGFzaGVzKGhhc2hlcykgPT4gZmZpOjpUcmFuc2FjdGlvbnM6Okhhc2hlcyhoYXNoZXMuY2xvbmUoKSksCiAgICAgIFNlbGY6OkZ1bGwodHJhbnNhY3Rpb25zKSA9PiBmZmk6OlRyYW5zYWN0aW9uczo6RnVsbCh0cmFuc2FjdGlvbnMudG9fdmVjKCkpLAogICAgfQogIH0KfQoKZm4gdG9waWNzX2Zyb21fc3RyaW5ncyh2YWx1ZTogVmVjPFN0cmluZz4pIC0+IFJlc3VsdDxbT3B0aW9uPFZhbHVlT3JBcnJheTxPcHRpb248SDI1Nj4+PjsgNF0sIFN0cmluZz4gewogIGlmIHZhbHVlLmxlbigpID4gNCB7CiAgICBFcnIoIlRvbyBtYW55IHRvcGljcyIudG9fc3RyaW5nKCkpCiAgfSBlbHNlIHsKICAgIGxldCBtYXBfc3RyaW5nX3RvX3RvcGljcyA9IHx2YWx1ZTogU3RyaW5nfCAtPiBSZXN1bHQ8T3B0aW9uPFZhbHVlT3JBcnJheTxPcHRpb248SDI1Nj4+PiwgU3RyaW5nPiB7CiAgICAgIGlmIHZhbHVlLmlzX2VtcHR5KCkgewogICAgICAgIE9rKE5vbmUpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgbGV0IHRvcGljczogVmVjPCZzdHI+ID0gdmFsdWUuc3BsaXQoJywnKS5jb2xsZWN0KCk7CiAgICAgICAgaWYgdG9waWNzLmxlbigpID09IDEgewogICAgICAgICAgT2soU29tZShWYWx1ZU9yQXJyYXk6OlZhbHVlKFNvbWUoaDI1Nl9mcm9tX3N0cmluZyh0b3BpY3NbMF0udG9fc3RyaW5nKCkpPykpKSkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbGV0IG1hcHBlZDogUmVzdWx0PFZlYzxIMjU2PiwgU3RyaW5nPiA9IHRvcGljcy5pbnRvX2l0ZXIoKS5tYXAofHRvcGljfCBoMjU2X2Zyb21fc3RyaW5nKHRvcGljLnRvX3N0cmluZygpKSkuY29sbGVjdCgpOwogICAgICAgICAgbGV0IG9wdGlvbl9tYXBwZWQ6IFZlYzxPcHRpb248SDI1Nj4+ID0gbWFwcGVkPy5pbnRvX2l0ZXIoKS5tYXAofGhhc2h8IE9wdGlvbjo6U29tZShoYXNoKSkuY29sbGVjdCgpOwogICAgICAgICAgT2soU29tZShWYWx1ZU9yQXJyYXk6OkFycmF5KG9wdGlvbl9tYXBwZWQpKSkKICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgICBsZXQgbXV0IHRvcGljcyA9IHZhbHVlLmNsb25lKCk7CiAgICBmb3IgX2kgaW4gdG9waWNzLmxlbigpLi40IHsKICAgICAgdG9waWNzLnB1c2goIiIudG9fc3RyaW5nKCkpOwogICAgfQogICAgbGV0IG1hcHBlZDogUmVzdWx0PFZlYzxPcHRpb248VmFsdWVPckFycmF5PE9wdGlvbjxIMjU2Pj4+PiwgU3RyaW5nPiA9IHRvcGljcy5pbnRvX2l0ZXIoKS5tYXAobWFwX3N0cmluZ190b190b3BpY3MpLmNvbGxlY3QoKTsKICAgIE9rKG1hcHBlZD8udHJ5X2ludG8oKS5tYXBfZXJyKHxfZXJyfCAiRmFpbGVkIHRvIG1hcCB2ZWN0b3IiKT8pCiAgfQp9CgpmbiBhZGRyZXNzX2Zyb21fc3RyaW5nKHZhbHVlOiBTdHJpbmcpIC0+IFJlc3VsdDxBZGRyZXNzLCBTdHJpbmc+IHsKICBsZXQgcmF3X2hleCA9IHZlYzhfZnJvbV9zdHJpbmcodmFsdWUpPzsKICBpZiByYXdfaGV4LmxlbigpID09IEFkZHJlc3M6Omxlbl9ieXRlcygpIHsKICAgIE9rKEFkZHJlc3M6OmZyb21fc2xpY2UoJnJhd19oZXgpKQogIH0gZWxzZSB7CiAgICBFcnIoZm9ybWF0ISgiU2hvdWxkIGJlIHt9IGJ5dGVzIGxvbmciLCBBZGRyZXNzOjpsZW5fYnl0ZXMoKSkpCiAgfQp9CgpmbiBhZGRyZXNzZXNfZnJvbV9zdHJpbmcodmFsdWU6IFN0cmluZykgLT4gUmVzdWx0PFZhbHVlT3JBcnJheTxBZGRyZXNzPiwgU3RyaW5nPiB7CiAgbGV0IGFkZHJlc3NlczogVmVjPCZzdHI+ID0gdmFsdWUuc3BsaXQoJywnKS5jb2xsZWN0KCk7CiAgaWYgYWRkcmVzc2VzLmxlbigpID09IDEgewogICAgT2soVmFsdWVPckFycmF5OjpWYWx1ZShhZGRyZXNzX2Zyb21fc3RyaW5nKGFkZHJlc3Nlc1swXS50b19zdHJpbmcoKSk/KSkKICB9IGVsc2UgewogICAgbGV0IG1hcHBlZDogUmVzdWx0PFZlYzxBZGRyZXNzPiwgU3RyaW5nPiA9IGFkZHJlc3Nlcy5pbnRvX2l0ZXIoKS5tYXAofGFkZHJlc3N8IGFkZHJlc3NfZnJvbV9zdHJpbmcoYWRkcmVzcy50b19zdHJpbmcoKSkpLmNvbGxlY3QoKTsKICAgIE9rKFZhbHVlT3JBcnJheTo6QXJyYXkobWFwcGVkPykpCiAgfQp9CgpmbiBoMjU2X2Zyb21fc3RyaW5nKHZhbHVlOiBTdHJpbmcpIC0+IFJlc3VsdDxIMjU2LCBTdHJpbmc+IHsKICBsZXQgcmF3X2hleCA9IHZlYzhfZnJvbV9zdHJpbmcodmFsdWUpPzsKICBpZiByYXdfaGV4LmxlbigpID09IEgyNTY6Omxlbl9ieXRlcygpIHsKICAgIE9rKEgyNTY6OmZyb21fc2xpY2UoJnJhd19oZXgpKQogIH0gZWxzZSB7CiAgICBFcnIoZm9ybWF0ISgiU2hvdWxkIGJlIHt9IGJ5dGVzIGxvbmciLCBIMjU2OjpsZW5fYnl0ZXMoKSkpCiAgfQp9CgpmbiB1MjU2X2Zyb21fc3RyaW5nKHZhbHVlOiBTdHJpbmcpIC0+IFJlc3VsdDxVMjU2LCBTdHJpbmc+IHsKICBpZiBsZXQgU29tZShyYXdfaGV4X3N0cmluZykgPSB2YWx1ZS5zdHJpcF9wcmVmaXgoIjB4IikgewogICAgT2soVTI1Njo6ZnJvbV9zdHJfcmFkaXgocmF3X2hleF9zdHJpbmcsIDE2KS5tYXBfZXJyKHxlcnJ8IGVyci50b19zdHJpbmcoKSk/KQogIH0gZWxzZSB7CiAgICBPayhVMjU2Ojpmcm9tX3N0cl9yYWRpeCgmdmFsdWUsIDEwKS5tYXBfZXJyKHxlcnJ8IGVyci50b19zdHJpbmcoKSk/KQogIH0KfQoKZm4gdmVjOF9mcm9tX3N0cmluZyh2YWx1ZTogU3RyaW5nKSAtPiBSZXN1bHQ8VmVjPHU4PiwgU3RyaW5nPiB7CiAgaWYgbGV0IFNvbWUocmF3X2hleF9zdHJpbmcpID0gdmFsdWUuc3RyaXBfcHJlZml4KCIweCIpIHsKICAgIE9rKGhleDo6ZGVjb2RlKHJhd19oZXhfc3RyaW5nKS5tYXBfZXJyKHxlcnJ8IGVyci50b19zdHJpbmcoKSk/KQogIH0gZWxzZSB7CiAgICBFcnIoIlNob3VsZCBiZSBhIGhleCB2YWx1ZSBwcmVmaXhlZCB3aXRoIDB4Ii50b19zdHJpbmcoKSkKICB9Cn0KCmZuIGV0aGVyc19sb2dfdG9fZmZpX2xvZyh2YWx1ZTogTG9nKSAtPiBmZmk6OkxvZyB7CiAgZmZpOjpMb2cgewogICAgYWRkcmVzczogZm9ybWF0ISgiMHh7fSIsIGhleDo6ZW5jb2RlKHZhbHVlLmFkZHJlc3MuYXNfYnl0ZXMoKSkpLAogICAgdG9waWNzOiB2YWx1ZS50b3BpY3MuaW50b19pdGVyKCkubWFwKHx0b3BpY3wgZm9ybWF0ISgiMHh7fSIsIGhleDo6ZW5jb2RlKHRvcGljLmFzX2J5dGVzKCkpKSkuY29sbGVjdCgpLAogICAgZGF0YTogdmFsdWUuZGF0YS5lbmNvZGUoKSwKICAgIGJsb2NrX2hhc2g6IHZhbHVlLmJsb2NrX2hhc2gubWFwKHxoYXNofCBmb3JtYXQhKCIweHt9IiwgaGV4OjplbmNvZGUoaGFzaC5hc19ieXRlcygpKSkpLnVud3JhcF9vcigiIi50b19zdHJpbmcoKSksCiAgICBibG9ja19udW1iZXI6IHZhbHVlLmJsb2NrX251bWJlci5tYXAofGJsb2NrfCBibG9jay5hc191NjQoKSksCiAgICB0cmFuc2FjdGlvbl9oYXNoOiB2YWx1ZS50cmFuc2FjdGlvbl9oYXNoLm1hcCh8aGFzaHwgZm9ybWF0ISgiMHh7fSIsIGhleDo6ZW5jb2RlKGhhc2guYXNfYnl0ZXMoKSkpKS51bndyYXBfb3IoIiIudG9fc3RyaW5nKCkpLAogICAgdHJhbnNhY3Rpb25faW5kZXg6IHZhbHVlLnRyYW5zYWN0aW9uX2luZGV4Lm1hcCh8aW5kZXh8IGluZGV4LmFzX3U2NCgpKSwKICAgIGxvZ19pbmRleDogdmFsdWUubG9nX2luZGV4Lm1hcCh8aW5kZXh8IGluZGV4LnRvX3N0cmluZygpKS51bndyYXBfb3IoIiIudG9fc3RyaW5nKCkpLAogICAgdHJhbnNhY3Rpb25fbG9nX2luZGV4OiB2YWx1ZS50cmFuc2FjdGlvbl9sb2dfaW5kZXgubWFwKHxpbmRleHwgaW5kZXgudG9fc3RyaW5nKCkpLnVud3JhcF9vcigiIi50b19zdHJpbmcoKSksCiAgICBsb2dfdHlwZTogdmFsdWUubG9nX3R5cGUudW53cmFwX29yKCIiLnRvX3N0cmluZygpKSwKICAgIHJlbW92ZWQ6IHZhbHVlLnJlbW92ZWQsCiAgfQp9CgpmbiBldGhlcnNfcmVjZWlwdF90b19mZmkodmFsdWU6IFRyYW5zYWN0aW9uUmVjZWlwdCkgLT4gZmZpOjpUcmFuc2FjdGlvblJlY2VpcHQgewogIGZmaTo6VHJhbnNhY3Rpb25SZWNlaXB0IHsKICAgIHRyYW5zYWN0aW9uX2hhc2g6IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZSh2YWx1ZS50cmFuc2FjdGlvbl9oYXNoLmFzX2J5dGVzKCkpKSwKICAgIHRyYW5zYWN0aW9uX2luZGV4OiB2YWx1ZS50cmFuc2FjdGlvbl9pbmRleC5hc191NjQoKSwKICAgIGJsb2NrX2hhc2g6IHZhbHVlLmJsb2NrX2hhc2gubWFwKHxoYXNofCBmb3JtYXQhKCIweHt9IiwgaGV4OjplbmNvZGUoaGFzaC5hc19ieXRlcygpKSkpLnVud3JhcF9vcigiIi50b19zdHJpbmcoKSksCiAgICBibG9ja19udW1iZXI6IHZhbHVlLmJsb2NrX251bWJlci5tYXAofG51bWJlcnwgbnVtYmVyLmFzX3U2NCgpKSwKICAgIGZyb206IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZSh2YWx1ZS5mcm9tLmFzX2J5dGVzKCkpKSwKICAgIHRvOiB2YWx1ZS50by5tYXAofGFkZHJlc3N8IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZShhZGRyZXNzLmFzX2J5dGVzKCkpKSkudW53cmFwX29yKCIiLnRvX3N0cmluZygpKSwKICAgIGN1bXVsYXRpdmVfZ2FzX3VzZWQ6IHZhbHVlLmN1bXVsYXRpdmVfZ2FzX3VzZWQudG9fc3RyaW5nKCksCiAgICBnYXNfdXNlZDogdmFsdWUuZ2FzX3VzZWQubWFwKHxnYXN8IGdhcy50b19zdHJpbmcoKSkudW53cmFwX29yKCIiLnRvX3N0cmluZygpKSwKICAgIGNvbnRyYWN0X2FkZHJlc3M6IHZhbHVlLmNvbnRyYWN0X2FkZHJlc3MubWFwKHxhZGRyZXNzfCBmb3JtYXQhKCIweHt9IiwgaGV4OjplbmNvZGUoYWRkcmVzcy5hc19ieXRlcygpKSkpLnVud3JhcF9vcigiIi50b19zdHJpbmcoKSksCiAgICBsb2dzOiB2YWx1ZS5sb2dzLmludG9faXRlcigpLm1hcChldGhlcnNfbG9nX3RvX2ZmaV9sb2cpLmNvbGxlY3QoKSwKICAgIHN0YXR1czogdmFsdWUuc3RhdHVzLm1hcCh8c3RhdHVzfCBzdGF0dXMuYXNfdTY0KCkpLAogICAgcm9vdDogdmFsdWUucm9vdC5tYXAofGhhc2h8IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZShoYXNoLmFzX2J5dGVzKCkpKSkudW53cmFwX29yKCIiLnRvX3N0cmluZygpKSwKICAgIGxvZ3NfYmxvb206IHZhbHVlLmxvZ3NfYmxvb20uYXNfYnl0ZXMoKS50b192ZWMoKSwKICAgIHRyYW5zYWN0aW9uX3R5cGU6IHZhbHVlLnRyYW5zYWN0aW9uX3R5cGUubWFwKHx2YWx8IHZhbC5hc191NjQoKSksCiAgICBlZmZlY3RpdmVfZ2FzX3ByaWNlOiB2YWx1ZS5lZmZlY3RpdmVfZ2FzX3ByaWNlLm1hcCh8Z2FzfCBnYXMudG9fc3RyaW5nKCkpLnVud3JhcF9vcigiIi50b19zdHJpbmcoKSksCiAgfQp9CgpmbiBldGhlcnNfdHJhbnNhY3Rpb25fdG9fZmZpKHZhbHVlOiBUcmFuc2FjdGlvbikgLT4gZmZpOjpUcmFuc2FjdGlvbiB7CiAgZmZpOjpUcmFuc2FjdGlvbiB7CiAgICBoYXNoOiBmb3JtYXQhKCIweHt9IiwgaGV4OjplbmNvZGUodmFsdWUuaGFzaC5hc19ieXRlcygpKSksCiAgICBub25jZTogdmFsdWUubm9uY2UudG9fc3RyaW5nKCksCiAgICBibG9ja19oYXNoOiB2YWx1ZS5ibG9ja19oYXNoLm1hcCh8aGFzaHwgZm9ybWF0ISgiMHh7fSIsIGhleDo6ZW5jb2RlKGhhc2guYXNfYnl0ZXMoKSkpKS51bndyYXBfb3IoIiIudG9fc3RyaW5nKCkpLAogICAgYmxvY2tfbnVtYmVyOiB2YWx1ZS5ibG9ja19udW1iZXIubWFwKHxibG9ja3wgYmxvY2suYXNfdTY0KCkpLAogICAgdHJhbnNhY3Rpb25faW5kZXg6IHZhbHVlLnRyYW5zYWN0aW9uX2luZGV4Lm1hcCh8aW5kZXh8IGluZGV4LmFzX3U2NCgpKSwKICAgIGZyb206IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZSh2YWx1ZS5mcm9tLmFzX2J5dGVzKCkpKSwKICAgIHRvOiB2YWx1ZS50by5tYXAofGFkZHJlc3N8IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZShhZGRyZXNzLmFzX2J5dGVzKCkpKSkudW53cmFwX29yKCIiLnRvX3N0cmluZygpKSwKICAgIHZhbHVlOiB2YWx1ZS52YWx1ZS50b19zdHJpbmcoKSwKICAgIGdhc19wcmljZTogdmFsdWUuZ2FzX3ByaWNlLm1hcCh8Z2FzfCBnYXMudG9fc3RyaW5nKCkpLnVud3JhcF9vcigiIi50b19zdHJpbmcoKSksCiAgICBnYXM6IHZhbHVlLmdhcy50b19zdHJpbmcoKSwKICAgIGlucHV0OiB2YWx1ZS5pbnB1dC50b192ZWMoKSwKICAgIHY6IHZhbHVlLnYudG9fc3RyaW5nKCksCiAgICByOiB2YWx1ZS5yLmVuY29kZV9oZXgoKSwKICAgIHM6IHZhbHVlLnMuZW5jb2RlX2hleCgpLAogIH0KfQoKZm4gaGVsaW9zX3RyYW5zYWN0aW9uc190b19mZmkodmFsdWU6IFRyYW5zYWN0aW9ucykgLT4gZmZpOjpUcmFuc2FjdGlvbnMgewogIG1hdGNoIHZhbHVlIHsKICAgIFRyYW5zYWN0aW9uczo6SGFzaGVzKGhhc2hlcykgPT4gZmZpOjpUcmFuc2FjdGlvbnM6Okhhc2hlcyhoYXNoZXMuaW50b19pdGVyKCkubWFwKHxoYXNofCBmb3JtYXQhKCIweHt9IiwgaGV4OjplbmNvZGUoaGFzaC5hc19ieXRlcygpKSkpLmNvbGxlY3QoKSksCiAgICBUcmFuc2FjdGlvbnM6OkZ1bGwodHJhbnNhY3Rpb25zKSA9PiBmZmk6OlRyYW5zYWN0aW9uczo6RnVsbCh0cmFuc2FjdGlvbnMuaW50b19pdGVyKCkubWFwKGV0aGVyc190cmFuc2FjdGlvbl90b19mZmkpLmNvbGxlY3QoKSksCiAgfQp9CgpmbiBoZWxpb3NfZXhlY3V0aW9uX2Jsb2NrX3RvX2ZmaSh2YWx1ZTogRXhlY3V0aW9uQmxvY2spIC0+IGZmaTo6RXhlY3V0aW9uQmxvY2sgewogIGZmaTo6RXhlY3V0aW9uQmxvY2sgewogICAgbnVtYmVyOiB2YWx1ZS5udW1iZXIsCiAgICBiYXNlX2ZlZV9wZXJfZ2FzOiB2YWx1ZS5iYXNlX2ZlZV9wZXJfZ2FzLnRvX3N0cmluZygpLAogICAgZGlmZmljdWx0eTogdmFsdWUuZGlmZmljdWx0eS50b19zdHJpbmcoKSwKICAgIGV4dHJhX2RhdGE6IHZhbHVlLmV4dHJhX2RhdGEudG9fdmVjKCksCiAgICBnYXNfbGltaXQ6IHZhbHVlLmdhc19saW1pdCwKICAgIGdhc191c2VkOiB2YWx1ZS5nYXNfdXNlZCwKICAgIGhhc2g6IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZSh2YWx1ZS5oYXNoLmFzX2J5dGVzKCkpKSwKICAgIGxvZ3NfYmxvb206IHZhbHVlLmxvZ3NfYmxvb20udG9fdmVjKCksCiAgICBtaW5lcjogZm9ybWF0ISgiMHh7fSIsIGhleDo6ZW5jb2RlKHZhbHVlLm1pbmVyLmFzX2J5dGVzKCkpKSwKICAgIG1peF9oYXNoOiBmb3JtYXQhKCIweHt9IiwgaGV4OjplbmNvZGUodmFsdWUubWl4X2hhc2guYXNfYnl0ZXMoKSkpLAogICAgbm9uY2U6IHZhbHVlLm5vbmNlLnRvX3N0cmluZygpLAogICAgcGFyZW50X2hhc2g6IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZSh2YWx1ZS5wYXJlbnRfaGFzaC5hc19ieXRlcygpKSksCiAgICByZWNlaXB0c19yb290OiBmb3JtYXQhKCIweHt9IiwgaGV4OjplbmNvZGUodmFsdWUucmVjZWlwdHNfcm9vdC5hc19ieXRlcygpKSksCiAgICBzaGEzX3VuY2xlczogZm9ybWF0ISgiMHh7fSIsIGhleDo6ZW5jb2RlKHZhbHVlLnNoYTNfdW5jbGVzLmFzX2J5dGVzKCkpKSwKICAgIHNpemU6IHZhbHVlLnNpemUsCiAgICBzdGF0ZV9yb290OiBmb3JtYXQhKCIweHt9IiwgaGV4OjplbmNvZGUodmFsdWUuc3RhdGVfcm9vdC5hc19ieXRlcygpKSksCiAgICB0aW1lc3RhbXA6IHZhbHVlLnRpbWVzdGFtcCwKICAgIHRvdGFsX2RpZmZpY3VsdHk6IHZhbHVlLnRvdGFsX2RpZmZpY3VsdHksCiAgICB0cmFuc2FjdGlvbnM6IGhlbGlvc190cmFuc2FjdGlvbnNfdG9fZmZpKHZhbHVlLnRyYW5zYWN0aW9ucyksCiAgICB0cmFuc2FjdGlvbnNfcm9vdDogZm9ybWF0ISgiMHh7fSIsIGhleDo6ZW5jb2RlKHZhbHVlLnRyYW5zYWN0aW9uc19yb290LmFzX2J5dGVzKCkpKSwKICAgIHVuY2xlczogdmFsdWUudW5jbGVzLmludG9faXRlcigpLm1hcCh8aGFzaHwgZm9ybWF0ISgiMHh7fSIsIGhleDo6ZW5jb2RlKGhhc2guYXNfYnl0ZXMoKSkpKS5jb2xsZWN0KCksCiAgfQp9CgpmbiBoZWxpb3NfaGVhZGVyX3RvX2ZmaSh2YWx1ZTogSGVhZGVyKSAtPiBmZmk6OkhlYWRlciB7CiAgZmZpOjpIZWFkZXIgewogICAgc2xvdDogdmFsdWUuc2xvdCwKICAgIHByb3Bvc2VyX2luZGV4OiB2YWx1ZS5wcm9wb3Nlcl9pbmRleCwKICAgIHBhcmVudF9yb290OiBmb3JtYXQhKCIweHt9IiwgaGV4OjplbmNvZGUodmFsdWUucGFyZW50X3Jvb3QpKSwKICAgIHN0YXRlX3Jvb3Q6IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZSh2YWx1ZS5zdGF0ZV9yb290KSksCiAgICBib2R5X3Jvb3Q6IGZvcm1hdCEoIjB4e30iLCBoZXg6OmVuY29kZSh2YWx1ZS5ib2R5X3Jvb3QpKSwKICB9Cn0KCnB1YiBzdHJ1Y3QgSGVsaW9zQ2xpZW50IHsKICBjbGllbnQ6IE9wdGlvbjxDbGllbnQ8RmlsZURCPj4sCiAgaXNfbG9nZ2luZzogYm9vbCwKfQo="

rust::build
build::lipo
build::generate_c_headers
build::xcframework

post_build::compress
post_build::copy_bridge_files
post_build::success
