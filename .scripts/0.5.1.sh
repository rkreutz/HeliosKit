#! /bin/zsh -e

source ".scripts/functions.sh"

set -e

PACKAGE_VERSION=0.5.1
SWIFT_BRIDGE_PACKAGE='git = "https:\/\/github.com\/rkreutz\/swift-bridge.git", branch = "feature\/struct-vec-support"'
SWIFT_BRIDGE_FEATURES='["async", "compatibility"]'
ETHERS_VERSION=2.0.2
USES_LOGGER=false
USES_TRACING=true
RUST_TOOLCHAIN='stable'

env::setup
env::build_configuration $1

rust::setup

pre_build::create_build_directory
pre_build::setup_helios
pre_build::modify_helios ""

# Expose rpc_bind_ip in helios/client/src/client.rs
echo $HELIOS_DIRECTORY
if grep -q -v "pub fn rpc_bind_ip(mut self, ip: IpAddr) -> Self {" "$HELIOS_DIRECTORY/client/src/client.rs"; then
    sed -i '' 's/^    pub fn rpc_port[(]mut self[,] port[:] u16[)] [-][>] Self [{]/    pub fn rpc_bind_ip(mut self, ip: IpAddr) -> Self {\n        self.rpc_bind_ip = Some(ip);\n        self\n    }\n\n    #[cfg(not(target_arch = "wasm32"))]\n    pub fn rpc_port(mut self, port: u16) -> Self {/' "$HELIOS_DIRECTORY/client/src/client.rs"
fi

rust::build
build::lipo
build::generate_c_headers
build::xcframework

post_build::compress
post_build::copy_bridge_files
post_build::success
